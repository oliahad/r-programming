Coursera Course ID	rprog-011
Swirl User ID		9594913
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

Enter the following from the R console, substituting the name of the course that you wish to install:

library(swirl)
install_from_swirl("Course Name Here")
swirl()

Enter the following from the R console, substituting the correct file path to your downloaded file and the name of your desired course:

library(swirl)
install_course_zip("path/to/file/here/swirl_courses-master.zip", multi=TRUE, 
                   which_course="Course Name Here")
swirl()

For example, if you download the zip file to ~/Downloads/swirl_courses-master.zip, then the following command will install the R Programming course.

install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE, which_course="R Programming")

Although we recommend you install one course at a time, if you omit the which_course argument, then all available courses from this repository will be installed:

install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE)

If you'd like to remove a course at any time, you can use uninstall_course("Course Name Here")

Beginner

R Programming: The basics of programming in R
R Programming Alt: Same as the original, but modified slightly for in-class use (see below ***)
Data Analysis: Basic ideas in statistics and data visualization
Mathematical Biostatistics Boot Camp: One- and two-sample t-tests, power, and sample size
Open Intro: A very basic introduction to statistics, data analysis, and data visualization
*** R Programming Alt is identical to R Programming, except we've eliminated the prompts for Coursera credentials at the end of each lesson and instead give students the option to send an email to their instructor notifying them of completion. Admittedly, it's sort of a hack until we come up with a more robust solution for in-class use (i.e. an instructor "dashboard").

Intermediate

Regression Models: The basics of regression modeling in R
Getting and Cleaning Data: dplyr, tidyr, lubridate, oh my!
Advanced

Statistical Inference: This intermediate to advanced level course closely follows the Statistical Inference course of the Johns Hopkins Data Science Specialization on Coursera. It introduces the student to basic concepts of statistical inference including probability, hypothesis testing, confidence intervals and p-values. It concludes with an initiation to topics of particular relevance to big data, issues of multiple testing and resampling.
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

> install.packages("swirl")

> library("swirl")

| Hi! Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl!

| Please sign in. If you've been here before,
| use the same name as you did then. If you are
| new, call yourself something unique.

What shall I call you? oliahad

| Thanks, oliahad. Let's cover a few quick
| housekeeping items before we begin our first
| lesson. First of all, you should know that
| when you see '...', that means you should
| press Enter when you are done reading and
| ready to continue.

...  <-- That's your cue to press Enter to continue

| Also, when you see 'ANSWER:', the R prompt (>), or when you are asked to
| select from a list, that means it's your turn to enter a response, then press
| Enter to continue.

Select 1, 2, or 3 and press Enter 

1: Continue.
2: Proceed.
3: Let's get going!

Selection: 3

| You can exit swirl and return to the R prompt (>) at any time by pressing the
| Esc key. If you are already at the prompt, type bye() to exit and save your
| progress. When you exit properly, you'll see a short message letting you know
| you've done so.

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore
| what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

| Let's get started!

help.start()

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(swirl)

| Hi! Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl!

| Please sign in. If you've been here before, use the same name as you did then.
| If you are new, call yourself something unique.

What shall I call you? oliahad

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 1

  |                                                                       |   0%

| In this lesson, we will explore some basic building blocks of the R
| programming language.

...

  |==                                                                     |   3%

| If at any point you'd like more information on a particular topic related to
| R, you can type help.start() at the prompt, which will open a menu of
| resources (either within RStudio or your default web browser, depending on
| your setup). Alternatively, a simple web search often yields the answer you're
| looking for.

...

  |====                                                                   |   5%

| In its simplest form, R can be used as an interactive calculator. Type 5 + 7
| and press Enter.

> 5 + 7
[1] 12

| Keep working like that and you'll get there!

  |======                                                                 |   8%

| R simply prints the result of 12 by default. However, R is a programming
| language and often the reason we use a programming language as opposed to a
| calculator is to automate some process or avoid unnecessary repetition.

...

  |========                                                               |  11%

| In this case, we may want to use our result from above in a second
| calculation. Instead of retyping 5 + 7 every time we need it, we can just
| create a new variable that stores the result.

...

  |==========                                                             |  14%

| The way you assign a value to a variable in R is by using the assignment
| operator, which is just a 'less than' symbol followed by a 'minus' sign. It
| looks like this: <-

...

  |============                                                           |  16%

| Think of the assignment operator as an arrow. You are assigning the value on
| the right side of the arrow to the variable name on the left side of the
| arrow.

...

  |=============                                                          |  19%

| To assign the result of 5 + 7 to a new variable called x, you type x <- 5 + 7.
| This can be read as 'x gets 5 plus 7'. Give it a try now.

> x <- 5 + 7

| Excellent work!

  |===============                                                        |  22%

| You'll notice that R did not print the result of 12 this time. When you use
| the assignment operator, R assumes that you don't want to see the result
| immediately, but rather that you intend to use the result for something else
| later on.

...

  |=================                                                      |  24%

| To view the contents of the variable x, just type x and press Enter. Try it
| now.

> x
[1] 12

| You're the best!

  |===================                                                    |  27%

| Now, store the result of x - 3 in a new variable called y.

> y <- x - 3

| That's a job well done!

  |=====================                                                  |  30%

| What is the value of y? Type y to find out.

> y
[1] 9

| You got it right!

  |=======================                                                |  32%

| Now, let's create a small collection of numbers called a vector. Any object
| that contains data is called a data structure and numeric vectors are the
| simplest type of data structure in R. In fact, even a single number is
| considered a vector of length one.

...

  |=========================                                              |  35%

| The easiest way to create a vector is with the c() function, which stands for
| 'concatenate' or 'combine'. To create a vector containing the numbers 1.1, 9,
| and 3.14, type c(1.1, 9, 3.14). Try it now and store the result in a variable
| called z.

> z <- c(1.1, 9, 3.14)

| You got it!

  |===========================                                            |  38%

| Anytime you have questions about a particular function, you can access R's
| built-in help files via the `?` command. For example, if you want more
| information on the c() function, type ?c without the parentheses that normally
| follow a function name. Give it a try.

> ?c

| You are really on a roll!

  |=============================                                          |  41%

| Type z to view its contents. Notice that there are no commas separating the
| values in the output.

> z
[1] 1.10 9.00 3.14

| You nailed it! Good job!

  |===============================                                        |  43%

| You can combine vectors to make a new vector. Create a new vector that
| contains z, 555, then z again in that order. Don't assign this vector to a new
| variable, so that we can just see the result immediately.

> c(z, 555, z)
[1]   1.10   9.00   3.14 555.00   1.10   9.00   3.14

| You got it right!

  |=================================                                      |  46%

| Numeric vectors can be used in arithmetic expressions. Type the following to
| see what happens: z * 2 + 100.

> z * 2 + 100
[1] 102.20 118.00 106.28

| All that practice is paying off!

  |===================================                                    |  49%

| First, R multiplied each of the three elements in z by 2. Then it added 100 to
| each element to get the result you see above.

...

  |====================================                                   |  51%

| Other common arithmetic operators are `+`, `-`, `/`, and `^` (where x^2 means
| 'x squared'). To take the square root, use the sqrt() function and to take the
| absolute value, use the abs() function.

...

  |======================================                                 |  54%

| Take the square root of z - 1 and assign it to a new variable called my_sqrt.

> my_sqrt <- sqrt(z - 1)

| You are really on a roll!

  |========================================                               |  57%

| Before we view the contents of the my_sqrt variable, what do you think it
| contains?

1: a single number (i.e a vector of length 1)
2: a vector of length 3
3: a vector of length 0 (i.e. an empty vector)

Selection: 2

| That's the answer I was looking for.

  |==========================================                             |  59%

| Print the contents of my_sqrt.

> print my_sqrt
Error: unexpected symbol in "print my_sqrt"
> my_sqrt
[1] 0.3162278 2.8284271 1.4628739

| You are amazing!

  |============================================                           |  62%

| As you may have guessed, R first subtracted 1 from each element of z, then
| took the square root of each element. This leaves you with a vector of the
| same length as the original vector z.

...

  |==============================================                         |  65%

| Now, create a new variable called my_div that gets the value of z divided by
| my_sqrt.

> my_div <- z / my_sqrt

| You are quite good my friend!

  |================================================                       |  68%

| Which statement do you think is true?

1: my_div is undefined
2: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...
3: my_div is a single number (i.e a vector of length 1)

Selection: 2

| You nailed it! Good job!

  |==================================================                     |  70%

| Go ahead and print the contents of my_div.

> my_div
[1] 3.478505 3.181981 2.146460

| You got it right!

  |====================================================                   |  73%

| When given two vectors of the same length, R simply performs the specified
| arithmetic operation (`+`, `-`, `*`, etc.) element-by-element. If the vectors
| are of different lengths, R 'recycles' the shorter vector until it is the same
| length as the longer vector.

...

  |======================================================                 |  76%

| When we did z * 2 + 100 in our earlier example, z was a vector of length 3,
| but technically 2 and 100 are each vectors of length 1.

...

  |========================================================               |  78%

| Behind the scenes, R is 'recycling' the 2 to make a vector of 2s and the 100
| to make a vector of 100s. In other words, when you ask R to compute z * 2 +
| 100, what it really computes is this: z * c(2, 2, 2) + c(100, 100, 100).

...

  |==========================================================             |  81%

| To see another example of how this vector 'recycling' works, try adding c(1,
| 2, 3, 4) and c(0, 10). Don't worry about saving the result in a new variable.

> c(1, 2, 3, 4) + c(0, 10)
[1]  1 12  3 14

| You are amazing!

  |===========================================================            |  84%

| If the length of the shorter vector does not divide evenly into the length of
| the longer vector, R will still apply the 'recycling' method, but will throw a
| warning to let you know something fishy might be going on.

...

  |=============================================================          |  86%

| Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.

> c(1, 2, 3, 4) + c(0, 10, 100)
[1]   1  12 103   4
Warning message:
In c(1, 2, 3, 4) + c(0, 10, 100) :
  longer object length is not a multiple of shorter object length

| You got it right!

  |===============================================================        |  89%

| Before concluding this lesson, I'd like to show you a couple of time-saving
| tricks.

...

  |=================================================================      |  92%

| Earlier in the lesson, you computed z * 2 + 100. Let's pretend that you made a
| mistake and that you meant to add 1000 instead of 100. You could either
| re-type the expression, or...

...

  |===================================================================    |  95%

| In many programming environments, the up arrow will cycle through previous
| commands. Try hitting the up arrow on your keyboard until you get to this
| command (z * 2 + 100), then change 100 to 1000 and hit Enter. If the up arrow
| doesn't work for you, just type the corrected command.

> z * 2 + 1000
[1] 1002.20 1018.00 1006.28

| All that practice is paying off!

  |=====================================================================  |  97%

| Finally, let's pretend you'd like to view the contents of a variable that you
| created earlier, but you can't seem to remember if you named it my_div or
| myDiv. You could try both and see what works, or...

...

  |=======================================================================| 100%

| You can type the first two letters of the variable name, then hit the Tab key
| (possibly more than once). Most programming environments will provide a list
| of variables that you've created that begin with 'my'. This is called
| auto-completion and can be quite handy when you have many variables in your
| workspace. Give it a try. (If auto-completion doesn't work for you, just type
| my_div and press Enter.)

> my_div
[1] 3.478505 3.181981 2.146460

| Perseverance, that's the answer.

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| The first item I need is your Course ID. For example, if the homepage for your
| Coursera course was 'https://class.coursera.org/rprog-001', then your course
| ID would be 'rprog-001' (without the quotes).

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011,
| Basic_Building_Blocks.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: i386-w64-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(swirl)

| Hi! Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl!

| Please sign in. If you've been here before, use the same name as you did then.
| If you are new, call yourself something unique.

What shall I call you? oliahad

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 2

  |                                                                       |   0%

| In this lesson, you'll learn how to examine your local workspace in R and
| begin to explore the relationship between your workspace and the file system
| of your machine.

...

  |==                                                                     |   2%

| Because different operating systems have different conventions with regards to
| things like file paths, the outputs of these commands may vary across
| machines.

...

  |===                                                                    |   5%

| Let's jump right in so you can get a feel for how these special functions
| work!

...

  |=====                                                                  |   7%

| Determine which directory your R session is using as its current working
| directory using getwd().

> getwd()
[1] "C:/Users/Internet/Documents"

| Nice work!

  |=======                                                                |  10%

| List all the objects in your local workspace using ls().

> ls()
[1] "old.dir" "x"      

| Great job!

  |=========                                                              |  12%

| Some R commands are the same as the Unix equivalents. This is another reason
| why learning Unix is a good idea.

...

  |==========                                                             |  15%

| In the first two questions above, we told you the exact command to use. But
| isn't that too easy? Going forward we won't do that.

...

  |============                                                           |  17%

| Instead, we will word the questions in such a way that a web search should
| lead you to the appropriate R command. In this case, searching for "R list
| objects workspace" should work well.)

...

  |==============                                                         |  20%

| Assign 9 to x using x <- 9.

> x <- 9

| Excellent work!

  |================                                                       |  22%

| Having created x, you should now see x when you try ls() again. You can do
| this by suspending this swirl lesson with play() at the command prompt. Once
| you have run the ls() command to confirm that x exists in the workspace, you
| can re-start the lesson from the same location with nxt(). Try it (after
| hitting return to get to a command prompt)!

...

  |=================                                                      |  24%

| List all the files in your working directory.

> list.files()
 [1] "20140218-Web Conference(703805989)"                                              
 [2] "20140721-BANGLADESH - Interact migration(848987366)"                             
 [3] "20140812-BANGLADESH & SRI LANKA_ Server Upgrade Planning with HCL.149(845143114)"
 [4] "cache"                                                                           
 [5] "Default.rdp"                                                                     
 [6] "Desktop"                                                                         
 [7] "desktop.ini"                                                                     
 [8] "GitHub"                                                                          
 [9] "My Digital Editions"                                                             
[10] "My Meetings"                                                                     
[11] "My Music"                                                                        
[12] "My Pictures"                                                                     
[13] "My Skype Pictures"                                                               
[14] "My Videos"                                                                       
[15] "Qubee Broadband"                                                                 
[16] "Qubee Broadband Update"                                                          
[17] "Youcam"                                                                          

| That's the answer I was looking for.

  |===================                                                    |  27%

| As we go through this lesson, you should be examining the help page for each
| new function.

...

  |=====================                                                  |  29%

| Pull up the help for list.files().

> ?list.files

| Excellent job!

  |=======================                                                |  32%

| One of the most helpful parts of any R help file is the See Also section. Read
| that section for list.files. Some of these functions may be used in later
| portions of this lesson.

...

  |========================                                               |  34%

| Using the args() function on a function name is also a handy way to see what
| arguments a function can take.

...

  |==========================                                             |  37%

| Use the args() function to determine the arguments to list.files().

> args(list.files)
function (path = ".", pattern = NULL, all.files = FALSE, full.names = FALSE, 
    recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, 
    no.. = FALSE) 
NULL

| You are quite good my friend!

  |============================                                           |  39%

| Assign the value of the current working directory to a variable called
| "old.dir".

> old.dir <- getwd()

| You are amazing!

  |=============================                                          |  41%

| We will use old.dir at the end of this lesson to move back to the place that
| we started. A lot of query functions like getwd() have the useful property
| that they return the answer to the question as a result of the function.

...

  |===============================                                        |  44%

| Create a directory in the current working directory called "testdir".

> dir.create("testdir")

| That's the answer I was looking for.

  |=================================                                      |  46%

| We will do all our work in this new directory and then delete it after we are
| done. This is the R analog to "Take only pictures, leave only footprints."

...

  |===================================                                    |  49%

| Set your working directory to "testdir".

> setwd("testdir")

| You got it right!

  |====================================                                   |  51%

| In general, you will want your working directory to be someplace sensible,
| perhaps created for the specific project that you are working on. In fact,
| organizing your work in R packages using R Studio is an excellent option. But
| those topics are beyond the scope of this lesson.

...

  |======================================                                 |  54%

| Create a file in your working directory called "mytest.R".

> file.create(mytest.R)
Error in file.create(mytest.R) : object 'mytest.R' not found
> file.create("mytest.R")
[1] TRUE

| That's correct!

  |========================================                               |  56%

| This should be the only file in this newly created directory. Issue the R
| command (which we have already covered) that will show this.

> list.files()
[1] "mytest.R"

| Excellent job!

  |==========================================                             |  59%

| Check to see if "mytest.R" exists in the working directory

> file.exists("mytest.R")
[1] TRUE

| You are doing so well!

  |===========================================                            |  61%

| These sorts of functions are excessive for interactive use. But, if you are
| running a program that loops through a series of files and does some
| processing on each one, you will want to check to see that each exists before
| you try to process it.

...

  |=============================================                          |  63%

| Access information about the file "mytest.R". That is, what command, along
| with the appropriate argument, will return information about the file
| "mytest.R"?

> file.info("mytest.R")
         size isdir mode               mtime               ctime
mytest.R    0 FALSE  666 2015-02-15 00:39:38 2015-02-15 00:39:38
                       atime exe
mytest.R 2015-02-15 00:39:38  no

| That's correct!

  |===============================================                        |  66%

| You can use the $ operator --- e.g., file.info("mytest.R")$mode --- to grab
| specific items.

...

  |================================================                       |  68%

| Change the name of the file "mytest.R" to "mytest2.R".

> file.rename("mytest.R", "mytest2.R")
[1] TRUE

| Nice work!

  |==================================================                     |  71%

| Your operating system will provide simpler tools for these sorts of tasks. But
| having the ability to manipulate files programatically is useful. You might
| now try to delete mytest.R using file.remove("mytest.R"), but that won't work
| since mytest.R no longer exists. You have already renamed it.

...

  |====================================================                   |  73%

| Make a copy of "mytest2.R" called "mytest3.R".

> file.copy("mytest2.R", "mytest3.R")
[1] TRUE

| All that hard work is paying off!

  |======================================================                 |  76%

| You now have two files in the current directory. That may not seem very
| interesting. But what if you were working with dozens, or millions, of
| individual files? In that case, being able to programatically act on many
| files would be absolutely necessary. Don't forget that you can, temporarily,
| leave the lesson by typing play() and then return by typing nxt().

...

  |=======================================================                |  78%

| Provide the full path to the file "mytest3.R".

> file.path("mytest3.R")
[1] "mytest3.R"

| Great job!

  |=========================================================              |  80%

| Create a directory in the current working directory called "testdir2" and a
| subdirectory for it called "testdir3", all in one command.

> dir.create("testdir2/testdir3", recursive = TRUE)

| All that practice is paying off!

  |===========================================================            |  83%

| Delete the "testdir2" directory that you created.

> unlink("testdir2")

| Try again. Getting it right on the first try is boring anyway! Or, type info()
| for more options.

| unlink("testdir2", recursive = TRUE) works.

> unlink("testdir2", recursive = TRUE)

| You are doing so well!

  |=============================================================          |  85%

| Again, you need the recursive = TRUE argument. Otherwise, R is concerned that
| you are unaware that, when deleting testdir2, you are also deleting testdir3,
| which is nested within it. R reasons that, if you don't tell it that recursive
| equals TRUE, you don't know that something is in testdir2. So, it tries to
| prevent you from making a mistake.

...

  |==============================================================         |  88%

| Why is this command named "unlink" rather than something more sensible like
| "dir.delete" or "dir.remove"? Mainly, history. unlink is the traditional Unix
| command for removing directories.

...

  |================================================================       |  90%

| Go back to your original working directory. (Recall that we created the
| variable old.dir with the full path for the orginal working directory at the
| start of these questions.)

> setwd(old.dir)

| Nice work!

  |==================================================================     |  93%

| It is often helpful to save the settings that you had before you began an
| analysis and then go back to them at the end. This trick is often used within
| functions; you save, say, the par() settings that you started with, mess
| around a bunch, and then set them back to the original values at the end. This
| isn't the same as what we have done here, but it seems similar enough to
| mention.

...

  |====================================================================   |  95%

| Delete the "testdir" directory that you just left (and everything in it)

> unlink("testdir")

| Keep trying! Or, type info() for more options.

| Use unlink("testdir", recursive = TRUE).

> unlink("testdir", recursive = TRUE)

| All that practice is paying off!

  |=====================================================================  |  98%

| Take nothing but results. Leave nothing but assumptions. That sounds like
| "Take nothing but pictures. Leave nothing but footprints." But it makes no
| sense! Surely our readers can come up with a better motto . . .

...

  |=======================================================================| 100%

| In this lesson, you learned how to examine your R workspace and work with the
| file system of your machine from within R.

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011, Workspace_and_Files.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 3

  |                                                                       |   0%

| In this lesson, you'll learn how to create sequences of numbers in R.

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 3

  |                                                                       |   0%

| In this lesson, you'll learn how to create sequences of numbers in R.

...

  |===                                                                    |   5%

| The simplest way to create a sequence of numbers in R is by using the `:`
| operator. Type 1:20 to see how it works.

> 1:20
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| Keep up the great work!

  |======                                                                 |   9%

| That gave us every integer between (and including) 1 and 20. We could also use
| it to create a sequence of real numbers. For example, try pi:10.

> pi:10
[1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593

| You got it right!

  |==========                                                             |  14%

| The result is a vector of real numbers starting with pi (3.142...) and
| increasing in increments of 1. The upper limit of 10 is never reached, since
| the next number in our sequence would be greater than 10.

...

  |=============                                                          |  18%

| What happens if we do 15:1? Give it a try to find out.

> 15:1
 [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1

| All that practice is paying off!

  |================                                                       |  23%

| It counted backwards in increments of 1! It's unlikely we'd want this
| behavior, but nonetheless it's good to know how it could happen.

...

  |===================                                                    |  27%

| Remember that if you have questions about a particular R function, you can
| access its documentation with a question mark followed by the function name:
| ?function_name_here. However, in the case of an operator like the colon used
| above, you must enclose the symbol in backticks like this: ?`:`. (NOTE: The
| backtick (`) key is generally located in the top left corner of a keyboard,
| above the Tab key. If you don't have a backtick key, you can use regular
| quotes.)

...play()

  |=======================                                                |  32%

| Pull up the documentation for `:` now.

> play()

| Entering play mode. Experiment as you please, then type nxt() when you are
| ready to resume the lesson.

> nxt()

| Resuming lesson...


| Pull up the documentation for `:` now.

> `:`
.Primitive(":")

| Give it another try. Or, type info() for more options.

| In order to view the documentation for a symbol like the colon operator, you
| have to use backticks (or quotes). This is so R knows you are not attempting
| to use the symbol in the command. Here's what it looks like: ?`:`. Don't
| forget the question mark out front.

> ?`:`

| Keep up the great work!

  |==========================                                             |  36%

| Often, we'll desire more control over a sequence we're creating than what the
| `:` operator gives us. The seq() function serves this purpose.

...

  |=============================                                          |  41%

| The most basic use of seq() does exactly the same thing as the `:` operator.
| Try seq(1, 20) to see this.

> seq(1, 20)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| Perseverance, that's the answer.

  |================================                                       |  45%

| This gives us the same output as 1:20. However, let's say that instead we want
| a vector of numbers ranging from 0 to 10, incremented by 0.5. seq(0, 10,
| by=0.5) does just that. Try it out.

> seq(0, 10, by=0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0
[16]  7.5  8.0  8.5  9.0  9.5 10.0

| You nailed it! Good job!

  |====================================                                   |  50%

| Or maybe we don't care what the increment is and we just want a sequence of 30
| numbers between 5 and 10. seq(5, 10, length=30) does the trick. Give it a shot
| now and store the result in a new variable called my_seq.

> my_seq <- seq(5, 10, length=30)

| You are quite good my friend!

  |=======================================                                |  55%

| To confirm that my_seq has length 30, we can use the length() function. Try it
| now.

> length(my_seq)
[1] 30

| You are really on a roll!

  |==========================================                             |  59%

| Let's pretend we don't know the length of my_seq, but we want to generate a
| sequence of integers from 1 to N, where N represents the length of the my_seq
| vector. In other words, we want a new vector (1, 2, 3, ...) that is the same
| length as my_seq.

...

  |=============================================                          |  64%

| There are several ways we could do this. One possibility is to combine the `:`
| operator and the length() function like this: 1:length(my_seq). Give that a
| try.

> 1:length(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30

| Great job!

  |================================================                       |  68%

| Another option is to use seq(along.with = my_seq). Give that a try.

> seq(along.with = my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30

| You got it right!

  |====================================================                   |  73%

| However, as is the case with many common tasks, R has a separate built-in
| function for this purpose called seq_along(). Type seq_along(my_seq) to see it
| in action.

> seq_along(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30

| All that hard work is paying off!

  |=======================================================                |  77%

| There are often several approaches to solving the same problem, particularly
| in R. Simple approaches that involve less typing are generally best. It's also
| important for your code to be readable, so that you and others can figure out
| what's going on without too much hassle.

...

  |==========================================================             |  82%

| If R has a built-in function for a particular task, it's likely that function
| is highly optimized for that purpose and is your best option. As you become a
| more advanced R programmer, you'll design your own functions to perform tasks
| when there are no better options. We'll explore writing your own functions in
| future lessons.

...

  |=============================================================          |  86%

| One more function related to creating sequences of numbers is rep(), which
| stands for 'replicate'. Let's look at a few uses.

...

  |=================================================================      |  91%

| If we're interested in creating a vector that contains 40 zeros, we can use
| rep(0, times = 40). Try it out.

> rep(0, times = 40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[39] 0 0

| Perseverance, that's the answer.

  |====================================================================   |  95%

| If instead we want our vector to contain 10 repetitions of the vector (0, 1,
| 2), we can do rep(c(0, 1, 2), times = 10). Go ahead.

> rep(c(0, 1, 2), times = 10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2

| All that practice is paying off!

  |=======================================================================| 100%

| Finally, let's say that rather than repeating the vector (0, 1, 2) over and
| over again, we want our vector to contain 10 zeros, then 10 ones, then 10
| twos. We can do this with the `each` argument. Try rep(c(0, 1, 2), each = 10).

> rep(c(0, 1, 2), each = 10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2

| You are quite good my friend!

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011,
| Sequences_of_Numbers.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 4

  |                                                                       |   0%

| The simplest and most common data structure in R is the vector.

...

  |==                                                                     |   3%

| Vectors come in two different flavors: atomic vectors and lists. An atomic
| vector contains exactly one data type, whereas a list may contain multiple
| data types. We'll explore atomic vectors further before we get to lists.

...

  |====                                                                   |   5%

| In previous lessons, we dealt entirely with numeric vectors, which are one
| type of atomic vector. Other types of atomic vectors include logical,
| character, integer, and complex. In this lesson, we'll take a closer look at
| logical and character vectors.

...

  |======                                                                 |   8%

| Logical vectors can contain the values TRUE, FALSE, and NA (for 'not
| available'). These values are generated as the result of logical 'conditions'.
| Let's experiment with some simple conditions.

...

  |========                                                               |  11%

| First, create a numeric vector num_vect that contains the values 0.5, 55, -10,
| and 6.

> num_vect <- c(0.5, 55, -10, 6)

| You nailed it! Good job!

  |==========                                                             |  14%

| Now, create a variable called tf that gets the result of num_vect < 1, which
| is read as 'num_vect is less than 1'.

> tf <- num_vect < 1

| All that hard work is paying off!

  |============                                                           |  16%

| What do you think tf will look like?

1: a vector of 4 logical values
2: a single logical value

Selection: 2

| Give it another try.

| Remember our lesson on vector arithmetic? The theme was that R performs many
| operations on an element-by-element basis. We called these 'vectorized'
| operations.

1: a vector of 4 logical values
2: a single logical value

Selection: 1

| Keep working like that and you'll get there!

  |=============                                                          |  19%

| Print the contents of tf now.

> tf
[1]  TRUE FALSE  TRUE FALSE

| That's a job well done!

  |===============                                                        |  22%

| The statement num_vect < 1 is a condition and tf tells us whether each
| corresponding element of our numeric vector num_vect satisfies this condition.

...

  |=================                                                      |  24%

| The first element of num_vect is 0.5, which is less than 1 and therefore the
| statement 0.5 < 1 is TRUE. The second element of num_vect is 55, which is
| greater than 1, so the statement 55 < 1 is FALSE. The same logic applies for
| the third and fourth elements.

...

  |===================                                                    |  27%

| Let's try another. Type num_vect >= 6 without assigning the result to a new
| variable.

> num_vect >= 6
[1] FALSE  TRUE FALSE  TRUE

| You nailed it! Good job!

  |=====================                                                  |  30%

| This time, we are asking whether each individual element of num_vect is
| greater than OR equal to 6. Since only 55 and 6 are greater than or equal to
| 6, the second and fourth elements of the result are TRUE and the first and
| third elements are FALSE.

...

  |=======================                                                |  32%

| The `<` and `>=` symbols in these examples are called 'logical operators'.
| Other logical operators include `>`, `<=`, `==` for exact equality, and `!=`
| for inequality.

...

  |=========================                                              |  35%

| If we have two logical expressions, A and B, we can ask whether at least one
| is TRUE with A | B (logical 'or' a.k.a. 'union') or whether they are both TRUE
| with A & B (logical 'and' a.k.a. 'intersection'). Lastly, !A is the negation
| of A and is TRUE when A is FALSE and vice versa.

...

  |===========================                                            |  38%

| It's a good idea to spend some time playing around with various combinations
| of these logical operators until you get comfortable with their use. We'll do
| a few examples here to get you started.

...

  |=============================                                          |  41%

| Try your best to predict the result of each of the following statements. You
| can use pencil and paper to work them out if it's helpful. If you get stuck,
| just guess and you've got a 50% chance of getting the right answer!

...

  |===============================                                        |  43%

| (3 > 5) & (4 == 4)

1: FALSE
2: TRUE

Selection: 1

| You are doing so well!

  |=================================                                      |  46%

| (TRUE == TRUE) | (TRUE == FALSE)

1: FALSE
2: TRUE

Selection: 2

| Excellent work!

  |===================================                                    |  49%

| ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)

1: TRUE
2: FALSE

Selection: 1

| Excellent job!

  |====================================                                   |  51%

| Don't worry if you found these to be tricky. They're supposed to be. Working
| with logical statements in R takes practice, but your efforts will be rewarded
| in future lessons (e.g. subsetting and control structures).

...

  |======================================                                 |  54%

| Character vectors are also very common in R. Double quotes are used to
| distinguish character objects, as in the following example.

...

  |========================================                               |  57%

| Create a character vector that contains the following words: "My", "name",
| "is". Remember to enclose each word in its own set of double quotes, so that R
| knows they are character strings. Store the vector in a variable called
| my_char.

> my_char <- c("My", "name", "is")

| You got it!

  |==========================================                             |  59%

| Print the contents of my_char to see what it looks like.

> my_char
[1] "My"   "name" "is"  

| All that hard work is paying off!

  |============================================                           |  62%

| Right now, my_char is a character vector of length 3. Let's say we want to
| join the elements of my_char together into one continuous character string
| (i.e. a character vector of length 1). We can do this using the paste()
| function.

...

  |==============================================                         |  65%

| Type paste(my_char, collapse = " ") now. Make sure there's a space between the
| double quotes in the `collapse` argument. You'll see why in a second.

> paste(my_char, collapse = " ")
[1] "My name is"

| Perseverance, that's the answer.

  |================================================                       |  68%

| The `collapse` argument to the paste() function tells R that when we join
| together the elements of the my_char character vector, we'd like to separate
| them with single spaces.

...

  |==================================================                     |  70%

| It seems that we're missing something.... Ah, yes! Your name!

...

  |====================================================                   |  73%

| To add (or 'concatenate') your name to the end of my_char, use the c()
| function like this: c(my_char, "your_name_here"). Place your name in double
| quotes where I've put "your_name_here". Try it now, storing the result in a
| new variable called my_name.

> my_name <- c(my_char, "oliahad")

| Nice work!

  |======================================================                 |  76%

| Take a look at the contents of my_name.

> my_name
[1] "My"      "name"    "is"      "oliahad"

| You're the best!

  |========================================================               |  78%

| Now, use the paste() function once more to join the words in my_name together
| into a single character string. Don't forget to say collapse = " "!

> paste(my_name, collapse = " ")
[1] "My name is oliahad"

| You are quite good my friend!

  |==========================================================             |  81%

| In this example, we used the paste() function to collapse the elements of a
| single character vector. paste() can also be used to join the elements of
| multiple character vectors.

...

  |===========================================================            |  84%

| In the simplest case, we can join two character vectors that are each of
| length 1 (i.e. join two words). Try paste("Hello", "world!", sep = " "), where
| the `sep` argument tells R that we want to separate the joined elements with a
| single space.

> paste("Hello", "world!", sep = " ")
[1] "Hello world!"

| All that practice is paying off!

  |=============================================================          |  86%

| For a slightly more complicated example, we can join two vectors, each of
| length 3. Use paste() to join the integer vector 1:3 with the character vector
| c("X", "Y", "Z"). This time, use sep = "" to leave no space between the joined
| elements.

> paste(1:3, c("X", "Y", "Z"), sep = "")
[1] "1X" "2Y" "3Z"

| You are amazing!

  |===============================================================        |  89%

| What do you think will happen if our vectors are of different length? (Hint:
| we talked about this in a previous lesson.)

...

  |=================================================================      |  92%

| Vector recycling! Try paste(LETTERS, 1:4, sep = "-"), where LETTERS is a
| predefined variable in R containing a character vector of all 26 letters in
| the English alphabet.

> paste(LETTERS, 1:4, sep = "-")
 [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3" "L-4"
[13] "M-1" "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3" "T-4" "U-1" "V-2" "W-3" "X-4"
[25] "Y-1" "Z-2"

| Keep working like that and you'll get there!

  |===================================================================    |  95%

| Since the character vector LETTERS is longer than the numeric vector 1:4, R
| simply recycles, or repeats, 1:4 until it matches the length of LETTERS.

...

  |=====================================================================  |  97%

| Also worth noting is that the numeric vector 1:4 gets 'coerced' into a
| character vector by the paste() function.

...

  |=======================================================================| 100%

| We'll discuss coercion in another lesson, but all it really means that the
| numbers 1, 2, 3, and 4 in the output above are no longer numbers to R, but
| rather characters "1", "2", "3", and "4".

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011, Vectors.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 5

  |                                                                       |   0%

| Missing values play an important role in statistics and data analysis. Often,
| missing values must not be ignored, but rather they should be carefully
| studied to see if there's an underlying pattern or cause for their
| missingness.

...

  |====                                                                   |   5%

| In R, NA is used to represent any value that is 'not available' or 'missing'
| (in the statistical sense). In this lesson, we'll explore missing values
| further.

...

  |=======                                                                |  11%

| Any operation involving NA generally yields NA as the result. To illustrate,
| let's create a vector c(44, NA, 5, NA) and assign it to a variable x.

> x <- c(44, NA, 5, NA)

| Excellent work!

  |===========                                                            |  16%

| Now, let's multiply x by 3.

> x * 3
[1] 132  NA  15  NA

| You nailed it! Good job!

  |===============                                                        |  21%

| Notice that the elements of the resulting vector that correspond with the NA
| values in x are also NA.

...

  |===================                                                    |  26%

| To make things a little more interesting, lets create a vector containing 1000
| draws from a standard normal distribution with y <- rnorm(1000).

> y <- rnorm(1000)

| You are doing so well!

  |======================                                                 |  32%

| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> z <- rep(NA, 1000)

| You nailed it! Good job!

  |==========================                                             |  37%

| Finally, let's select 100 elements at random from these 2000 values (combining
| y and z) such that we don't know how many NAs we'll wind up with or what
| positions they'll occupy in our final vector -- my_data <- sample(c(y, z),
| 100).

> my_data <- sample(c(y, z), 100)

| Keep working like that and you'll get there!

  |==============================                                         |  42%

| Let's first ask the question of where our NAs are located in our data. The
| is.na() function tells us whether each element of a vector is NA. Call is.na()
| on my_data and assign the result to my_na.

> my_na <- is.na(my_data)

| Your dedication is inspiring!

  |==================================                                     |  47%

| Now, print my_na to see what you came up with.

> my_na
  [1] FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE
 [13]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE
 [25] FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE
 [37]  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE
 [49]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE
 [61] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE
 [73]  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE
 [85]  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE
 [97] FALSE  TRUE FALSE FALSE

| Great job!

  |=====================================                                  |  53%

| Everywhere you see a TRUE, you know the corresponding element of my_data is
| NA. Likewise, everywhere you see a FALSE, you know the corresponding element
| of my_data is one of our random draws from the standard normal distribution.

...

  |=========================================                              |  58%

| In our previous discussion of logical operators, we introduced the `==`
| operator as a method of testing for equality between two objects. So, you
| might think the expression my_data == NA yields the same results as is.na().
| Give it a try.

> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [26] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [51] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [76] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| You are amazing!

  |=============================================                          |  63%

| The reason you got a vector of all NAs is that NA is not really a value, but
| just a placeholder for a quantity that is not available. Therefore the logical
| expression is incomplete and R has no choice but to return a vector of the
| same length as my_data that contains all NAs.

...

  |=================================================                      |  68%

| Don't worry if that's a little confusing. The key takeaway is to be cautious
| when using logical expressions anytime NAs might creep in, since a single NA
| value can derail the entire thing.

...

  |====================================================                   |  74%

| So, back to the task at hand. Now that we have a vector, my_na, that has a
| TRUE for every NA and FALSE for every numeric value, we can compute the total
| number of NAs in our data.

...

  |========================================================               |  79%

| The trick is to recognize that underneath the surface, R represents TRUE as
| the number 1 and FALSE as the number 0. Therefore, if we take the sum of a
| bunch of TRUEs and FALSEs, we get the total number of TRUEs.

...

  |============================================================           |  84%

| Let's give that a try here. Call the sum() function on my_na to count the
| total number of TRUEs in my_na, and thus the total number of NAs in my_data.
| Don't assign the result to a new variable.

> sum(my_na)
[1] 49

| All that hard work is paying off!

  |================================================================       |  89%

| Pretty cool, huh? Finally, let's take a look at the data to convince ourselves
| that everything 'adds up'. Print my_data to the console.

> my_data
  [1]  1.07239223          NA          NA -1.13066894 -1.41641653  0.95925575
  [7]  0.31229063          NA          NA          NA -0.55289612          NA
 [13]          NA          NA          NA -0.05428196          NA          NA
 [19]          NA -0.21145488  0.14936787 -0.64304178          NA  1.77133405
 [25]  2.24918996  0.55372203 -0.52167176          NA -1.20143543          NA
 [31]          NA          NA -0.99782041  0.79482296  0.52559794          NA
 [37]          NA -0.39670600 -0.26717666          NA -1.38166959          NA
 [43]          NA  0.32776182  3.29766604          NA -0.26881769  1.39333100
 [49]          NA          NA  0.28521501          NA          NA          NA
 [55]          NA          NA  1.17067115          NA  0.54116183  1.00202434
 [61] -0.96396153          NA -0.13982741  1.11942863 -0.98674657 -0.19373264
 [67]          NA          NA  1.32840214 -0.07836249          NA  0.91252296
 [73]          NA          NA -0.62517357 -2.00886703          NA -0.07139728
 [79]          NA          NA -0.22054228          NA  1.25982982 -0.28272556
 [85]          NA          NA          NA  1.22354370  2.42587983 -2.72557201
 [91]          NA -0.59649100          NA          NA -0.22491920          NA
 [97]  1.20852076          NA -0.91360588  1.25510679

| Great job!

  |===================================================================    |  95%

| Now that we've got NAs down pat, let's look at a second type of missing value
| -- NaN, which stands for 'not a number'. To generate NaN, try dividing (using
| a forward slash) 0 by 0 now.

> 0 / 0
[1] NaN

| You're the best!

  |=======================================================================| 100%

| Let's do one more, just for fun. In R, Inf stands for infinity. What happens
| if you subtract Inf from Inf?

> Inf - Inf
[1] NaN

| Perseverance, that's the answer.

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| I'm sorry, something went wrong with establishing connection.

| Would you like to retry automatic submission or just submit manually?

1: Retry automatic submission
2: Submit manually

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 6

  |                                                                       |   0%

| In this lesson, we'll see how to extract elements from a vector based on some
| conditions that we specify.

...

  |==                                                                     |   3%

| For example, we may only be interested in the first 20 elements of a vector,
| or only the elements that are not NA, or only those that are positive or
| correspond to a specific variable of interest. By the end of this lesson,
| you'll know how to handle each of these scenarios.

...

  |====                                                                   |   5%

| I've created for you a vector called x that contains a random ordering of 20
| numbers (from a standard normal distribution) and 20 NAs. Type x now to see
| what it looks like.

> x
 [1] -0.5259595310  0.0003343565            NA            NA            NA
 [6]            NA            NA            NA            NA -2.2277944526
[11]            NA            NA -0.7758062267  0.1486272406  0.3028378463
[16]            NA            NA            NA -1.6281601797            NA
[21] -0.6335945873 -0.4254368545  0.3408319720  1.1337325609            NA
[26]            NA  0.8089134227  0.5685701526  0.7881064087 -0.2731063829
[31]  1.2728052716            NA -1.4324140954            NA -1.2150407307
[36]            NA            NA -0.2480958311  0.2811635295            NA

| You're the best!

  |======                                                                 |   8%

| The way you tell R that you want to select some particular elements (i.e. a
| 'subset') from a vector is by placing an 'index vector' in square brackets
| immediately following the name of the vector.

...

  |=======                                                                |  11%

| For a simple example, try x[1:10] to view the first ten elements of x.

> x[1:10]
 [1] -0.5259595310  0.0003343565            NA            NA            NA
 [6]            NA            NA            NA            NA -2.2277944526

| You are doing so well!

  |=========                                                              |  13%

| Index vectors come in four different flavors -- logical vectors, vectors of
| positive integers, vectors of negative integers, and vectors of character
| strings -- each of which we'll cover in this lesson.

...

  |===========                                                            |  16%

| Let's start by indexing with logical vectors. One common scenario when working
| with real-world data is that we want to extract all elements of a vector that
| are not NA (i.e. missing data). Recall that is.na(x) yields a vector of
| logical values the same length as x, with TRUEs corresponding to NA values in
| x and FALSEs corresponding to non-NA values in x.

...

  |=============                                                          |  18%

| What do you think x[is.na(x)] will give you?

1: A vector of all NAs
2: A vector of length 0
3: A vector of TRUEs and FALSEs
4: A vector with no NAs

Selection: 3

| Try again. Getting it right on the first try is boring anyway!

| Remember that is.na(x) tells us where the NAs are in a vector. So if we subset
| x based on that, what do you expect to happen?

1: A vector of length 0
2: A vector with no NAs
3: A vector of all NAs
4: A vector of TRUEs and FALSEs

Selection: 1

| Not quite, but you're learning! Try again.

| Remember that is.na(x) tells us where the NAs are in a vector. So if we subset
| x based on that, what do you expect to happen?

1: A vector of TRUEs and FALSEs
2: A vector with no NAs
3: A vector of all NAs
4: A vector of length 0

Selection: 2

| You're close...I can feel it! Try it again.

| Remember that is.na(x) tells us where the NAs are in a vector. So if we subset
| x based on that, what do you expect to happen?

1: A vector of length 0
2: A vector of TRUEs and FALSEs
3: A vector with no NAs
4: A vector of all NAs

Selection: 4

| You are doing so well!

  |===============                                                        |  21%

| Prove it to yourself by typing x[is.na(x)].

> x[is.na(x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| All that practice is paying off!

  |=================                                                      |  24%

| Recall that `!` gives us the negation of a logical expression, so !is.na(x)
| can be read as 'is not NA'. Therefore, if we want to create a vector called y
| that contains all of the non-NA values from x, we can use y <- x[!is.na(x)].
| Give it a try.

> y <- x[!is.na(x)]

| You are really on a roll!

  |===================                                                    |  26%

| Print y to the console.

> y
 [1] -0.5259595310  0.0003343565 -2.2277944526 -0.7758062267  0.1486272406
 [6]  0.3028378463 -1.6281601797 -0.6335945873 -0.4254368545  0.3408319720
[11]  1.1337325609  0.8089134227  0.5685701526  0.7881064087 -0.2731063829
[16]  1.2728052716 -1.4324140954 -1.2150407307 -0.2480958311  0.2811635295

| Perseverance, that's the answer.

  |=====================                                                  |  29%

| Now that we've isolated the non-missing values of x and put them in y, we can
| subset y as we please.

...

  |======================                                                 |  32%

| Recall that the expression y > 0 will give us a vector of logical values the
| same length as y, with TRUEs corresponding to values of y that are greater
| than zero and FALSEs corresponding to values of y that are less than or equal
| to zero. What do you think y[y > 0] will give you?

1: A vector of all NAs
2: A vector of TRUEs and FALSEs
3: A vector of all the positive elements of y
4: A vector of all the negative elements of y
5: A vector of length 0

Selection: 2

| Not exactly. Give it another go.

| The logical expression y > 0 will give us TRUE for each element of y that is
| positive. Based on that, what do you think y[y > 0] will return?

1: A vector of all the negative elements of y
2: A vector of TRUEs and FALSEs
3: A vector of all the positive elements of y
4: A vector of all NAs
5: A vector of length 0

Selection: 3

| You got it!

  |========================                                               |  34%

| Type y[y > 0] to see that we get all of the positive elements of y, which are
| also the positive elements of our original vector x.

> y[y > 0]
 [1] 0.0003343565 0.1486272406 0.3028378463 0.3408319720 1.1337325609
 [6] 0.8089134227 0.5685701526 0.7881064087 1.2728052716 0.2811635295

| You are really on a roll!

  |==========================                                             |  37%

| You might wonder why we didn't just start with x[x > 0] to isolate the
| positive elements of x. Try that now to see why.

> x[x > 0]
 [1] 0.0003343565           NA           NA           NA           NA
 [6]           NA           NA           NA           NA           NA
[11] 0.1486272406 0.3028378463           NA           NA           NA
[16]           NA 0.3408319720 1.1337325609           NA           NA
[21] 0.8089134227 0.5685701526 0.7881064087 1.2728052716           NA
[26]           NA           NA           NA 0.2811635295           NA

| You got it right!

  |============================                                           |  39%

| Since NA is not a value, but rather a placeholder for an unknown quantity, the
| expression NA > 0 evaluates to NA. Hence we get a bunch of NAs mixed in with
| our positive numbers when we do this.

...

  |==============================                                         |  42%

| Combining our knowledge of logical operators with our new knowledge of
| subsetting, we could do this -- x[!is.na(x) & x > 0]. Try it out.

> x[!is.na(x) & x > 0]
 [1] 0.0003343565 0.1486272406 0.3028378463 0.3408319720 1.1337325609
 [6] 0.8089134227 0.5685701526 0.7881064087 1.2728052716 0.2811635295

| You are really on a roll!

  |================================                                       |  45%

| In this case, we request only values of x that are both non-missing AND
| greater than zero.

...

  |==================================                                     |  47%

| I've already shown you how to subset just the first ten values of x using
| x[1:10]. In this case, we're providing a vector of positive integers inside of
| the square brackets, which tells R to return only the elements of x numbered 1
| through 10.

...

  |====================================                                   |  50%

| Many programming languages use what's called 'zero-based indexing', which
| means that the first element of a vector is considered element 0. R uses
| 'one-based indexing', which (you guessed it!) means the first element of a
| vector is considered element 1.

...

  |=====================================                                  |  53%

| Can you figure out how we'd subset the 3rd, 5th, and 7th elements of x? Hint
| -- Use the c() function to specify the element numbers as a numeric vector.

> x[c(3, 5, 7)]
[1] NA NA NA

| You're the best!

  |=======================================                                |  55%

| It's important that when using integer vectors to subset our vector x, we
| stick with the set of indexes {1, 2, ..., 40} since x only has 40 elements.
| What happens if we ask for the zeroth element of x (i.e. x[0])? Give it a try.

> x[0]
numeric(0)

| You got it!

  |=========================================                              |  58%

| As you might expect, we get nothing useful. Unfortunately, R doesn't prevent
| us from doing this. What if we ask for the 3000th element of x? Try it out.

> x[300]
[1] NA

| Almost! Try again. Or, type info() for more options.

| Request the 3000th element of x (which does not exist) with x[3000].

> x[3000]
[1] NA

| All that practice is paying off!

  |===========================================                            |  61%

| Again, nothing useful, but R doesn't prevent us from asking for it. This
| should be a cautionary tale. You should always make sure that what you are
| asking for is within the bounds of the vector you're working with.

...

  |=============================================                          |  63%

| What if we're interested in all elements of x EXCEPT the 2nd and 10th? It
| would be pretty tedious to construct a vector containing all numbers 1 through
| 40 EXCEPT 2 and 10.

...

  |===============================================                        |  66%

| Luckily, R accepts negative integer indexes. Whereas x[c(2, 10)] gives us ONLY
| the 2nd and 10th elements of x, x[c(-2, -10)] gives us all elements of x
| EXCEPT for the 2nd and 10 elements.  Try x[c(-2, -10)] now to see this.

> x[c(-2, -10)]
 [1] -0.5259595         NA         NA         NA         NA         NA         NA
 [8]         NA         NA         NA -0.7758062  0.1486272  0.3028378         NA
[15]         NA         NA -1.6281602         NA -0.6335946 -0.4254369  0.3408320
[22]  1.1337326         NA         NA  0.8089134  0.5685702  0.7881064 -0.2731064
[29]  1.2728053         NA -1.4324141         NA -1.2150407         NA         NA
[36] -0.2480958  0.2811635         NA

| You are amazing!

  |=================================================                      |  68%

| A shorthand way of specifying multiple negative numbers is to put the negative
| sign out in front of the vector of positive numbers. Type x[-c(2, 10)] to get
| the exact same result.

> x[-c(2, 10)]
 [1] -0.5259595         NA         NA         NA         NA         NA         NA
 [8]         NA         NA         NA -0.7758062  0.1486272  0.3028378         NA
[15]         NA         NA -1.6281602         NA -0.6335946 -0.4254369  0.3408320
[22]  1.1337326         NA         NA  0.8089134  0.5685702  0.7881064 -0.2731064
[29]  1.2728053         NA -1.4324141         NA -1.2150407         NA         NA
[36] -0.2480958  0.2811635         NA

| Keep working like that and you'll get there!

  |==================================================                     |  71%

| So far, we've covered three types of index vectors -- logical, positive
| integer, and negative integer. The only remaining type requires us to
| introduce the concept of 'named' elements.

...

  |====================================================                   |  74%

| Create a numeric vector with three named elements using vect <- c(foo = 11,
| bar = 2, norf = NA).

> vect <- c(foo = 11, bar = 2, norf = NA)

| You are doing so well!

  |======================================================                 |  76%

| When we print vect to the console, you'll see that each element has a name.
| Try it out.

> vect
 foo  bar norf 
  11    2   NA 

| Keep up the great work!

  |========================================================               |  79%

| We can also get the names of vect by passing vect as an argument to the
| names() function. Give that a try.

> names(vect)
[1] "foo"  "bar"  "norf"

| That's correct!

  |==========================================================             |  82%

| Alternatively, we can create an unnamed vector vect2 with c(11, 2, NA). Do
| that now.

> vect2 <- c(11, 2, NA)

| Keep working like that and you'll get there!

  |============================================================           |  84%

| Then, we can add the `names` attribute to vect2 after the fact with
| names(vect2) <- c("foo", "bar", "norf"). Go ahead.

> names(vect2) <- c("foo", "bar", "norf")

| All that hard work is paying off!

  |==============================================================         |  87%

| Now, let's check that vect and vect2 are the same by passing them as arguments
| to the identical() function.

> identical(vect, vect2)
[1] TRUE

| You are quite good my friend!

  |================================================================       |  89%

| Indeed, vect and vect2 are identical named vectors.

...

  |=================================================================      |  92%

| Now, back to the matter of subsetting a vector by named elements. Which of the
| following commands do you think would give us the second element of vect?

1: vect[bar]
2: vect["2"]
3: vect["bar"]

Selection: 3

| Nice work!

  |===================================================================    |  95%

| Now, try it out.

> vect["bar"]
bar 
  2 

| You are quite good my friend!

  |=====================================================================  |  97%

| Likewise, we can specify a vector of names with vect[c("foo", "bar")]. Try it
| out.

> vect[c("foo", "bar")]
foo bar 
 11   2 

| Great job!

  |=======================================================================| 100%

| Now you know all four methods of subsetting data from vectors. Different
| approaches are best in different scenarios and when in doubt, try it out!

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011, Subsetting_Vectors.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 7

  |                                                                       |   0%

| In this lesson, we'll cover matrices and data frames. Both represent
| 'rectangular' data types, meaning that they are used to store tabular data,
| with rows and columns.

...

  |==                                                                     |   3%

| The main difference, as you'll see, is that matrices can only contain a single
| class of data, while data frames can consist of many different classes of
| data.

...

  |====                                                                   |   6%

| Let's create a vector containing the numbers 1 through 20 using the `:`
| operator. Store the result in a variable called my_vector.

> my_vector <- 1:20

| All that practice is paying off!

  |======                                                                 |   9%

| View the contents of the vector you just created.

> my_vector
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You're the best!

  |========                                                               |  11%

| The dim() function tells us the 'dimensions' of an object. What happens if we
| do dim(my_vector)? Give it a try.

> dim(my_vector)
NULL

| You got it!

  |==========                                                             |  14%

| Clearly, that's not very helpful! Since my_vector is a vector, it doesn't have
| a `dim` attribute (so it's just NULL), but we can find its length using the
| length() function. Try that now.

> length(my_vector)
[1] 20

| You're the best!

  |============                                                           |  17%

| Ah! That's what we wanted. But, what happens if we give my_vector a `dim`
| attribute? Let's give it a try. Type dim(my_vector) <- c(4, 5).

> dim(my_vector) <- c(4, 5)

| Keep up the great work!

  |==============                                                         |  20%

| It's okay if that last command seemed a little strange to you. It should! The
| dim() function allows you to get OR set the `dim` attribute for an R object.
| In this case, we assigned the value c(4, 5) to the `dim` attribute of
| my_vector.

...

  |================                                                       |  23%

| Use dim(my_vector) to confirm that we've set the `dim` attribute correctly.

> dim(my_vector)
[1] 4 5

| You nailed it! Good job!

  |==================                                                     |  26%

| Another way to see this is by calling the attributes() function on my_vector.
| Try it now.

> attributes(my_vector)
$dim
[1] 4 5


| All that practice is paying off!

  |====================                                                   |  29%

| Just like in math class, when dealing with a 2-dimensional object (think
| rectangular table), the first number is the number of rows and the second is
| the number of columns. Therefore, we just gave my_vector 4 rows and 5 columns.

...

  |======================                                                 |  31%

| But, wait! That doesn't sound like a vector any more. Well, it's not. Now it's
| a matrix. View the contents of my_vector now to see what it looks like.

> 
> my_vector
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20

| You are amazing!

  |========================                                               |  34%

| Now, let's confirm it's actually a matrix by using the class() function. Type
| class(my_vector) to see what I mean.

> class(my_vector)
[1] "matrix"

| That's a job well done!

  |==========================                                             |  37%

| Sure enough, my_vector is now a matrix. We should store it in a new variable
| that helps us remember what it is. Store the value of my_vector in a new
| variable called my_matrix.

> my_matrix <- my_vector

| Great job!

  |============================                                           |  40%

| The example that we've used so far was meant to illustrate the point that a
| matrix is simply an atomic vector with a dimension attribute. A more direct
| method of creating the same matrix uses the matrix() function.

...

  |==============================                                         |  43%

| Bring up the help file for the matrix() function now using the `?` function.

> ?matrix

| Excellent job!

  |================================                                       |  46%

| Now, look at the documentation for the matrix function and see if you can
| figure out how to create a matrix containing the same numbers (1-20) and
| dimensions (4 rows, 5 columns) by calling the matrix() function. Store the
| result in a variable called my_matrix2.

> my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)

| Keep working like that and you'll get there!

  |==================================                                     |  49%

| Finally, let's confirm that my_matrix and my_matrix2 are actually identical.
| The identical() function will tell us if its first two arguments are the same.
| Try it out.

> identical(my_matrix, my_matrix2)
[1] TRUE

| Your dedication is inspiring!

  |=====================================                                  |  51%

| Now, imagine that the numbers in our table represent some measurements from a
| clinical experiment, where each row represents one patient and each column
| represents one variable for which measurements were taken.

...

  |=======================================                                |  54%

| We may want to label the rows, so that we know which numbers belong to each
| patient in the experiment. One way to do this is to add a column to the
| matrix, which contains the names of all four people.

...

  |=========================================                              |  57%

| Let's start by creating a character vector containing the names of our
| patients -- Bill, Gina, Kelly, and Sean. Remember that double quotes tell R
| that something is a character string. Store the result in a variable called
| patients.

> patients <- c("Bill", "Gina", "Kelly", "Sean")

| Excellent work!

  |===========================================                            |  60%

| Now we'll use the cbind() function to 'combine columns'. Don't worry about
| storing the result in a new variable. Just call cbind() with two arguments --
| the patients vector and my_matrix.

> cbind(patients, my_matrix)
     patients                       
[1,] "Bill"   "1" "5" "9"  "13" "17"
[2,] "Gina"   "2" "6" "10" "14" "18"
[3,] "Kelly"  "3" "7" "11" "15" "19"
[4,] "Sean"   "4" "8" "12" "16" "20"

| Excellent work!

  |=============================================                          |  63%

| Something is fishy about our result! It appears that combining the character
| vector with our matrix of numbers caused everything to be enclosed in double
| quotes. This means we're left with a matrix of character strings, which is no
| good.

...

  |===============================================                        |  66%

| If you remember back to the beginning of this lesson, I told you that matrices
| can only contain ONE class of data. Therefore, when we tried to combine a
| character vector with a numeric matrix, R was forced to 'coerce' the numbers
| to characters, hence the double quotes.

...

  |=================================================                      |  69%

| This is called 'implicit coercion', because we didn't ask for it. It just
| happened. But why didn't R just convert the names of our patients to numbers?
| I'll let you ponder that question on your own.

...

  |===================================================                    |  71%

| So, we're still left with the question of how to include the names of our
| patients in the table without destroying the integrity of our numeric data.
| Try the following -- my_data <- data.frame(patients, my_matrix)

> my_data <- data.frame(patients, my_matrix)

| Perseverance, that's the answer.

  |=====================================================                  |  74%

| Now view the contents of my_data to see what we've come up with.

> my_data
  patients X1 X2 X3 X4 X5
1     Bill  1  5  9 13 17
2     Gina  2  6 10 14 18
3    Kelly  3  7 11 15 19
4     Sean  4  8 12 16 20

| You are really on a roll!

  |=======================================================                |  77%

| It looks like the data.frame() function allowed us to store our character
| vector of names right alongside our matrix of numbers. That's exactly what we
| were hoping for!

...

  |=========================================================              |  80%

| Behind the scenes, the data.frame() function takes any number of arguments and
| returns a single object of class `data.frame` that is composed of the original
| objects.

...

  |===========================================================            |  83%

| Let's confirm this by calling the class() function on our newly created data
| frame.

> class(my_data)
[1] "data.frame"

| Great job!

  |=============================================================          |  86%

| It's also possible to assign names to the individual rows and columns of a
| data frame, which presents another possible way of determining which row of
| values in our table belongs to each patient.

...

  |===============================================================        |  89%

| However, since we've already solved that problem, let's solve a different
| problem by assigning names to the columns of our data frame so that we know
| what type of measurement each column represents.

...

  |=================================================================      |  91%

| Since we have six columns (including patient names), we'll need to first
| create a vector containing one element for each column. Create a character
| vector called cnames that contains the following values (in order) --
| "patient", "age", "weight", "bp", "rating", "test".

> cnames <- c("patient", "age", "weight", "bp", "rating", "test")

| You are doing so well!

  |===================================================================    |  94%

| Now, use the colnames() function to set the `colnames` attribute for our data
| frame. This is similar to the way we used the dim() function earlier in this
| lesson.

> colnames(my_data) <- cnames

| You are doing so well!

  |=====================================================================  |  97%

| Let's see if that got the job done. Print the contents of my_data.

> my_data
  patient age weight bp rating test
1    Bill   1      5  9     13   17
2    Gina   2      6 10     14   18
3   Kelly   3      7 11     15   19
4    Sean   4      8 12     16   20

| Excellent work!

  |=======================================================================| 100%

| In this lesson, you learned the basics of working with two very important and
| common data structures -- matrices and data frames. There's much more to learn
| and we'll be covering more advanced topics, particularly with respect to data
| frames, in future lessons.

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011,
| Matrices_and_Data_Frames.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 8

  |                                                                       |   0%

| This lesson is meant to be a short introduction to logical operations in R.

...

  |=                                                                      |   2%

| There are two logical values in R, also called boolean values. They are TRUE
| and FALSE. In R you can construct logical expressions which will evaluate to
| either TRUE or FALSE.

...

  |===                                                                    |   4%

| Many of the questions in this lesson will involve evaluating logical
| expressions. It may be useful to open up a second R terminal where you can
| experiment with some of these expressions.

...

  |====                                                                   |   6%

| Creating logical expressions requires logical operators. You're probably
| familiar with arithmetic operators like `+`, `-`, `*`, and `/`. The first
| logical operator we are going to discuss is the equality operator, represented
| by two equals signs `==`. Use the equality operator below to find out if TRUE
| is equal to TRUE.

> TRUE == TRUE
[1] TRUE

| Keep up the great work!

  |======                                                                 |   8%

| Just like arithmetic, logical expressions can be grouped by parenthesis so
| that the entire expression (TRUE == TRUE) == TRUE evaluates to TRUE.

...

  |=======                                                                |  10%

| To test out this property, try evaluating (FALSE == TRUE) == FALSE .

> (FALSE == TRUE) == FALSE
[1] TRUE

| That's a job well done!

  |========                                                               |  12%

| The equality operator can also be used to compare numbers. Use `==` to see if
| 6 is equal to 7.

> 6 == 7
[1] FALSE

| You got it right!

  |==========                                                             |  14%

| The previous expression evaluates to FALSE because 6 is less than 7.
| Thankfully, there are inequality operators that allow us to test if a value is
| less than or greater than another value.

...

  |===========                                                            |  16%

| The less than operator `<` tests whether the number on the left side of the
| operator (called the left operand) is less than the number on the right side
| of the operator (called the right operand). Write an expression to test
| whether 6 is less than 7.

> 6 < 7
[1] TRUE

| Keep up the great work!

  |=============                                                          |  18%

| There is also a less-than-or-equal-to operator `<=` which tests whether the
| left operand is less than or equal to the right operand. Write an expression
| to test whether 10 is less than or equal to 10.

> 10 <= 10
[1] TRUE

| You are amazing!

  |==============                                                         |  20%

| Keep in mind that there are the corresponding greater than `>` and
| greater-than-or-equal-to `>=` operators.

...

  |===============                                                        |  22%

| Which of the following evaluates to FALSE?

1: 7 == 7
2: 0 > -36
3: 6 < 8
4: 9 >= 10

Selection: 4

| Nice work!

  |=================                                                      |  24%

| Which of the following evaluates to TRUE?

1: 57 < 8
2: -6 > -7
3: 9 >= 10
4: 7 == 9

Selection: 2

| Keep up the great work!

  |==================                                                     |  25%

| The next operator we will discuss is the 'not equals' operator represented by
| `!=`. Not equals tests whether two values are unequal, so TRUE != FALSE
| evaluates to TRUE. Like the equality operator, `!=` can also be used with
| numbers. Try writing an expression to see if 5 is not equal to 7.

> 5 != 7
[1] TRUE

| Excellent job!

  |===================                                                    |  27%

| In order to negate boolean expressions you can use the NOT operator. An
| exclamation point `!` will cause !TRUE (say: not true) to evaluate to FALSE
| and !FALSE (say: not false) to evaluate to TRUE. Try using the NOT operator
| and the equals operator to find the opposite of whether 5 is equal to 7.

> 5 = NOT 7
Error: unexpected numeric constant in "5 = NOT 7"
> 5 != 7
[1] TRUE

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| This expression may be a little tricky, so think about negating the expression
| 5 == 7 (all you need is an exclamation point in front).

> 5 !== 7
Error: unexpected '=' in "5 !=="
> !5 == 7
[1] TRUE

| You got it!

  |=====================                                                  |  29%

| Let's take a moment to review. The equals operator `==` tests whether two
| boolean values or numbers are equal, the not equals operator `!=` tests
| whether two boolean values or numbers are unequal, and the NOT operator `!`
| negates logical expressions so that TRUE expressions become FALSE and FALSE
| expressions become TRUE.

...

  |======================                                                 |  31%

| Which of the following evaluates to FALSE?

1: !(0 >= -1)
2: 7 != 8
3: !FALSE
4: 9 < 10

Selection: 1

| All that hard work is paying off!

  |========================                                               |  33%

| What do you think the following expression will evaluate to?: (TRUE != FALSE)
| == !(6 == 7)

1: Can there be objective truth when programming?
2: TRUE
3: FALSE
4: %>%

Selection: 2

| That's the answer I was looking for.

  |=========================                                              |  35%

| At some point you may need to examine relationships between multiple logical
| expressions. This is where the AND operator and the OR operator come in.

...

  |==========================                                             |  37%

| Let's look at how the AND operator works. There are two AND operators in R,
| `&` and `&&`. Both operators work similarly, if the right and left operands of
| AND are both TRUE the entire expression is TRUE, otherwise it is FALSE. For
| example, TRUE & TRUE evaluates to TRUE. Try typing FALSE & FALSE to how it is
| evaluated.

> FALSE & FALSE
[1] FALSE

| Excellent job!

  |============================                                           |  39%

| You can use the `&` operator to evaluate AND across a vector. The `&&` version
| of AND only evaluates the first member of a vector. Let's test both for
| practice. Type the expression TRUE & c(TRUE, FALSE, FALSE).

> TRUE & c(TRUE, FALSE, FALSE)
[1]  TRUE FALSE FALSE

| Keep working like that and you'll get there!

  |=============================                                          |  41%

| What happens in this case is that the left operand `TRUE` is recycled across
| every element in the vector of the right operand. This is the equivalent
| statement as c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE).

...

  |===============================                                        |  43%

| Now we'll type the same expression except we'll use the `&&` operator. Type
| the expression TRUE && c(TRUE, FALSE, FALSE).

> TRUE && c(TRUE, FALSE, FALSE)
[1] TRUE

| You're the best!

  |================================                                       |  45%

| In this case, the left operand is only evaluated with the first member of the
| right operand (the vector). The rest of the elements in the vector aren't
| evaluated at all in this expression.

...

  |=================================                                      |  47%

| The OR operator follows a similar set of rules. The `|` version of OR
| evaluates OR across an entire vector, while the `||` version of OR only
| evaluates the first member of a vector.

...

  |===================================                                    |  49%

| An expression using the OR operator will evaluate to TRUE if the left operand
| or the right operand is TRUE. If both are TRUE, the expression will evaluate
| to TRUE, however if neither are TRUE, then the expression will be FALSE.

...

  |====================================                                   |  51%

| Let's test out the vectorized version of the OR operator. Type the expression
| TRUE | c(TRUE, FALSE, FALSE).

> TRUE | c(TRUE, FALSE, FALSE)
[1] TRUE TRUE TRUE

| All that practice is paying off!

  |======================================                                 |  53%

| Now let's try out the non-vectorized version of the OR operator. Type the
| expression TRUE || c(TRUE, FALSE, FALSE).

> TRUE || c(TRUE, FALSE, FALSE)
[1] TRUE

| Excellent job!

  |=======================================                                |  55%

| Logical operators can be chained together just like arithmetic operators. The
| expressions: `6 != 10 && FALSE && 1 >= 2` or `TRUE || 5 < 9.3 || FALSE` are
| perfectly normal to see.

...

  |========================================                               |  57%

| As you may recall, arithmetic has an order of operations and so do logical
| expressions. All AND operators are evaluated before OR operators. Let's look
| at an example of an ambiguous case. Type: 5 > 8 || 6 != 8 && 4 > 3.9

> 5 > 8 || 6 != 8 && 4 > 3.9
[1] TRUE

| Keep working like that and you'll get there!

  |==========================================                             |  59%

| Let's walk through the order of operations in the above case. First the left
| and right operands of the AND operator are evaluated. 6 is not equal 8, 4 is
| greater than 3.9, therefore both operands are TRUE so the resulting expression
| `TRUE && TRUE` evaluates to TRUE. Then the left operand of the OR operator is
| evaluated: 5 is not greater than 8 so the entire expression is reduced to
| FALSE || TRUE. Since the right operand of this expression is TRUE the entire
| expression evaluates to TRUE.

...

  |===========================================                            |  61%

| Which one of the following expressions evaluates to TRUE?

1: FALSE || TRUE && FALSE
2: TRUE && 62 < 62 && 44 >= 44
3: TRUE && FALSE || 9 >= 4 && 3 < 6
4: 99.99 > 100 || 45 < 7.3 || 4 != 4.0

Selection: 3

| You got it!

  |=============================================                          |  63%

| Which one of the following expressions evaluates to FALSE?

1: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
2: FALSE || TRUE && 6 != 4 || 9 > 4
3: 6 >= -9 && !(6 > 7) && !(!TRUE)
4: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5

Selection: 3

| You almost had it, but not quite. Try again.

| Try to evaluate each expression in isolation and build up an answer.

1: FALSE || TRUE && 6 != 4 || 9 > 4
2: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
3: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
4: 6 >= -9 && !(6 > 7) && !(!TRUE)

Selection: 4

| One more time. You can do it!

| Try to evaluate each expression in isolation and build up an answer.

1: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
2: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
3: FALSE || TRUE && 6 != 4 || 9 > 4
4: 6 >= -9 && !(6 > 7) && !(!TRUE)

Selection: 3

| Give it another try.

| Try to evaluate each expression in isolation and build up an answer.

1: 6 >= -9 && !(6 > 7) && !(!TRUE)
2: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
3: FALSE || TRUE && 6 != 4 || 9 > 4
4: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5

Selection: 1

| You're close...I can feel it! Try it again.

| Try to evaluate each expression in isolation and build up an answer.

1: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
2: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
3: FALSE || TRUE && 6 != 4 || 9 > 4
4: 6 >= -9 && !(6 > 7) && !(!TRUE)

Selection: 2

| Nice work!

  |==============================================                         |  65%

| Now that you're familiar with R's logical operators you can take advantage of
| a few functions that R provides for dealing with logical expressions.

...

  |===============================================                        |  67%

| The function isTRUE() takes one argument. If that argument evaluates to TRUE,
| the function will return TRUE. Otherwise, the function will return FALSE. Try
| using this function by typing: isTRUE(6 > 4)

> isTRUE(6 > 4)
[1] TRUE

| You're the best!

  |=================================================                      |  69%

| Which of the following evaluates to TRUE?

1: !isTRUE(4 < 3)
2: isTRUE(3)
3: isTRUE(!TRUE)
4: !isTRUE(8 != 5)
5: isTRUE(NA)

Selection: 1

| Your dedication is inspiring!

  |==================================================                     |  71%

| The function identical() will return TRUE if the two R objects passed to it as
| arguments are identical. Try out the identical() function by typing:
| identical('twins', 'twins')

> identical('twins', 'twins')
[1] TRUE

| That's correct!

  |====================================================                   |  73%

| Which of the following evaluates to TRUE?

1: identical(4, 3.1)
2: identical(5 > 4, 3 < 3.1)
3: identical('hello', 'Hello')
4: !identical(7, 7)

Selection: 2

| You're the best!

  |=====================================================                  |  75%

| You should also be aware of the xor() function, which takes two arguments. The
| xor() function stands for exclusive OR. If one argument evaluates to TRUE and
| one argument evaluates to FALSE, then this function will return TRUE,
| otherwise it will return FALSE. Try out the xor() function by typing: xor(5 ==
| 6, !FALSE)

> xor(5 == 6, !FALSE)
[1] TRUE

| That's the answer I was looking for.

  |======================================================                 |  76%

| 5 == 6 evaluates to FALSE, !FALSE evaluates to TRUE, so xor(FALSE, TRUE)
| evaluates to TRUE. On the other hand if the first argument was changed to 5 ==
| 5 and the second argument was unchanged then both arguments would have been
| TRUE, so xor(TRUE, TRUE) would have evaluated to FALSE.

...

  |========================================================               |  78%

| Which of the following evaluates to FALSE?

1: xor(!!TRUE, !!FALSE)
2: xor(!isTRUE(TRUE), 6 > -1)
3: xor(identical(xor, 'xor'), 7 == 7.0)
4: xor(4 >= 9, 8 != 8.0)

Selection: 1

| Almost! Try again.

| For xor() to evaluate to TRUE, one argument must be TRUE and one must be
| FALSE.

1: xor(4 >= 9, 8 != 8.0)
2: xor(identical(xor, 'xor'), 7 == 7.0)
3: xor(!!TRUE, !!FALSE)
4: xor(!isTRUE(TRUE), 6 > -1)

Selection: 1

| That's the answer I was looking for.

  |=========================================================              |  80%

| For the next few questions, we're going to need to create a vector of integers
| called ints. Create this vector by typing: ints <- sample(10)

> ints <- sample(10)

| That's the answer I was looking for.

  |==========================================================             |  82%

| Now simply display the contents of ints.

> ints
 [1]  1  8  6  3  9  5  2 10  7  4

| You are quite good my friend!

  |============================================================           |  84%

| The vector `ints` is a random sampling of integers from 1 to 10 without
| replacement. Let's say we wanted to ask some logical questions about contents
| of ints. If we type ints > 5, we will get a logical vector corresponding to
| whether each element of ints is greater than 5. Try typing: ints > 5

> ints > 5
 [1] FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE

| Great job!

  |=============================================================          |  86%

| We can use the resulting logical vector to ask other questions about ints. The
| which() function takes a logical vector as an argument and returns the indices
| of the vector that are TRUE. For example which(c(TRUE, FALSE, TRUE)) would
| return the vector c(1, 3).

...

  |===============================================================        |  88%

| Use the which() function to find the indices of ints that are greater than 7.

> ints(which(c(>7)))
Error: unexpected '>' in "ints(which(c(>"
> ints(which(7)))
Error: unexpected ')' in "ints(which(7)))"
> info()

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore
| what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

> which(ints, >7)
Error: unexpected '>' in "which(ints, >"
> which(ints$>7)
Error: unexpected '>' in "which(ints$>"
> which(ints>7)
[1] 2 5 8

| Great job!

  |================================================================       |  90%

| Which of the following commands would produce the indices of the elements in
| ints that are less than or equal to 2?

1: ints < 2
2: ints <= 2
3: which(ints < 2)
4: which(ints <= 2)

Selection: 4

| You're the best!

  |=================================================================      |  92%

| Like the which() function, the functions any() and all() take logical vectors
| as their argument. The any() function will return TRUE if one or more of the
| elements in the logical vector is TRUE. The all() function will return TRUE if
| every element in the logical vector is TRUE.

...

  |===================================================================    |  94%

| Use the any() function to see if any of the elements of ints are less than
| zero.

> any(ints < 0)
[1] FALSE

| Excellent work!

  |====================================================================   |  96%

| Use the all() function to see if all of the elements of ints are greater than
| zero.

> any(all > 0)
Error in all > 0 : 
  comparison (6) is possible only for atomic and list types
> all(ints > 0)
[1] TRUE

| All that hard work is paying off!

  |====================================================================== |  98%

| Which of the following evaluates to TRUE?

1: any(ints == 10)
2: all(c(TRUE, FALSE, TRUE))
3: any(ints == 2.5)
4: all(ints == 10)

Selection: 1

| All that hard work is paying off!

  |=======================================================================| 100%

| That's all for this introduction to logic in R. If you really want to see what
| you can do with logic, check out the control flow lesson!

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011, Logic.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

[1] "factor"

$botright
[1] "factor"


| You got it!

  |===================                                                    |  27%

| The 'l' in 'lapply' stands for 'list'. Type class(cls_list) to confirm that
| lapply() returned a list.

> class(cls_list)
[1] "list"

| Perseverance, that's the answer.

  |====================                                                   |  29%

| As expected, we got a list of length 30 -- one element for each
| variable/column. The output would be considerably more compact if we could
| represent it as a vector instead of a list.

...

  |======================                                                 |  31%

| You may remember from a previous lesson that lists are most helpful for
| storing multiple classes of data. In this case, since every element of the
| list returned by lapply() is a character vector of length one (i.e. "integer"
| and "vector"), cls_list can be simplified to a character vector. To do this
| manually, type as.character(cls_list).

> as.character(cls_list)
 [1] "factor"  "integer" "integer" "integer" "integer" "integer" "integer"
 [8] "integer" "integer" "integer" "integer" "integer" "integer" "integer"
[15] "integer" "integer" "integer" "factor"  "integer" "integer" "integer"
[22] "integer" "integer" "integer" "integer" "integer" "integer" "integer"
[29] "factor"  "factor" 

| That's a job well done!

  |=======================                                                |  33%

| sapply() allows you to automate this process by calling lapply() behind the
| scenes, but then attempting to simplify (hence the 's' in 'sapply') the result
| for you. Use sapply() the same way you used lapply() to get the class of each
| column of the flags dataset and store the result in cls_vect. If you need
| help, type ?sapply to bring up the documentation.

> ?sapply
> cls_vect <- sapply(flags, class)

| That's correct!

  |=========================                                              |  35%

| Use class(cls_vect) to confirm that sapply() simplified the result to a
| character vector.

> class(cls_vect)
[1] "character"

| Excellent work!

  |==========================                                             |  37%

| In general, if the result is a list where every element is of length one, then
| sapply() returns a vector. If the result is a list where every element is a
| vector of the same length (> 1), sapply() returns a matrix. If sapply() can't
| figure things out, then it just returns a list, no different from what
| lapply() would give you.

...

  |============================                                           |  39%

| Let's practice using lapply() and sapply() some more!

...

  |=============================                                          |  41%

| Columns 11 through 17 of our dataset are indicator variables, each
| representing a different color. The value of the indicator variable is 1 if
| the color is present in a country's flag and 0 otherwise.

...

  |==============================                                         |  43%

| Therefore, if we want to know the total number of countries (in our dataset)
| with, for example, the color orange on their flag, we can just add up all of
| the 1s and 0s in the 'orange' column. Try sum(flags$orange) to see this.

> sum(flags$orange)
[1] 26

| You got it right!

  |================================                                       |  45%

| Now we want to repeat this operation for each of the colors recorded in the
| dataset.

...

  |=================================                                      |  47%

| First, use flag_colors <- flags[, 11:17] to extract the columns containing the
| color data and store them in a new data frame called flag_colors. (Note the
| comma before 11:17. This subsetting command tells R that we want all rows, but
| only columns 11 through 17.)

> flag_colors <- flags[, 11:17]

| You got it!

  |===================================                                    |  49%

| Use the head() function to look at the first 6 lines of flag_colors.

> head(flag_colors)
  red green blue gold white black orange
1   1     1    0    1     1     1      0
2   1     0    0    1     0     1      0
3   1     1    0    0     1     0      0
4   1     0    1    1     1     0      1
5   1     0    1    1     0     0      0
6   1     0    0    1     0     1      0

| That's the answer I was looking for.

  |====================================                                   |  51%

| To get a list containing the sum of each column of flag_colors, call the
| lapply() function with two arguments. The first argument is the object over
| which we are looping (i.e. flag_colors) and the second argument is the name of
| the function we wish to apply to each column (i.e. sum). Remember that the
| second argument is just the name of the function with no parentheses, etc.

> 
> lapply(flag_colors, sum)
$red
[1] 153

$green
[1] 91

$blue
[1] 99

$gold
[1] 91

$white
[1] 146

$black
[1] 52

$orange
[1] 26


| Your dedication is inspiring!

  |======================================                                 |  53%

| This tells us that of the 194 flags in our dataset, 153 contain the color red,
| 91 contain green, 99 contain blue, and so on.

...

  |=======================================                                |  55%

| The result is a list, since lapply() always returns a list. Each element of
| this list is of length one, so the result can be simplified to a vector by
| calling sapply() instead of lapply(). Try it now.

> sapply(flag_colors, sum)
   red  green   blue   gold  white  black orange 
   153     91     99     91    146     52     26 

| That's correct!

  |=========================================                              |  57%

| Perhaps it's more informative to find the proportion of flags (out of 194)
| containing each color. Since each column is just a bunch of 1s and 0s, the
| arithmetic mean of each column will give us the proportion of 1s. (If it's not
| clear why, think of a simpler situation where you have three 1s and two 0s --
| (1 + 1 + 1 + 0 + 0)/5 = 3/5 = 0.6).

...

  |==========================================                             |  59%

| Use sapply() to apply the mean() function to each column of flag_colors.
| Remember that the second argument to sapply() should just specify the name of
| the function (i.e. mean) that you want to apply.

> sapply(flag_colors, mean)
      red     green      blue      gold     white     black    orange 
0.7886598 0.4690722 0.5103093 0.4690722 0.7525773 0.2680412 0.1340206 

| That's a job well done!

  |===========================================                            |  61%

| In the examples we've looked at so far, sapply() has been able to simplify the
| result to vector. That's because each element of the list returned by lapply()
| was a vector of length one. Recall that sapply() instead returns a matrix when
| each element of the list returned by lapply() is a vector of the same length
| (> 1).

...

  |=============================================                          |  63%

| To illustrate this, let's extract columns 19 through 23 from the flags dataset
| and store the result in a new data frame called flag_shapes. flag_shapes <-
| flags[, 19:23] will do it.

> flag_shapes <-flags[, 19:23]

| Excellent work!

  |==============================================                         |  65%

| Each of these columns (i.e. variables) represents the number of times a
| particular shape or design appears on a country's flag. We are interested in
| the minimum and maximum number of times each shape or design appears.

...

  |================================================                       |  67%

| The range() function returns the minimum and maximum of its first argument,
| which should be a numeric vector. Use lapply() to apply the range function to
| each column of flag_shapes. Don't worry about storing the result in a new
| variable. By now, we know that lapply() always returns a list.

> lapply(flag_shapes, range)
$circles
[1] 0 4

$crosses
[1] 0 2

$saltires
[1] 0 1

$quarters
[1] 0 4

$sunstars
[1]  0 50


| Keep up the great work!

  |=================================================                      |  69%

| Do the same operation, but using sapply() and store the result in a variable
| called shape_mat.

> shape_mat <- sapply(flag_shapes, range)

| That's a job well done!

  |===================================================                    |  71%

| View the contents of shape_mat.

> shape_mat
     circles crosses saltires quarters sunstars
[1,]       0       0        0        0        0
[2,]       4       2        1        4       50

| Great job!

  |====================================================                   |  73%

| Each column of shape_mat gives the minimum (row 1) and maximum (row 2) number
| of times its respective shape appears in different flags.

...

  |======================================================                 |  76%

| Use the class() function to confirm that shape_mat is a matrix.

> class(shape_mat)
[1] "matrix"

| Excellent job!

  |=======================================================                |  78%

| As we've seen, sapply() always attempts to simplify the result given by
| lapply(). It has been successful in doing so for each of the examples we've
| looked at so far. Let's look at an example where sapply() can't figure out how
| to simplify the result and thus returns a list, no different from lapply().

...

  |=========================================================              |  80%

| When given a vector, the unique() function returns a vector with all duplicate
| elements removed. In other words, unique() returns a vector of only the
| 'unique' elements. To see how it works, try unique(c(3, 4, 5, 5, 5, 6, 6)).

> unique(c(3, 4, 5, 5, 5, 6, 6))
[1] 3 4 5 6

| Nice work!

  |==========================================================             |  82%

| We want to know the unique values for each variable in the flags dataset. To
| accomplish this, use lapply() to apply the unique() function to each column in
| the flags dataset, storing the result in a variable called unique_vals.

> unique_vals <- lapply(flags, unique)

| You are amazing!

  |===========================================================            |  84%

| Print the value of unique_vals to the console.

> unique_vals
$name
  [1] Afghanistan              Albania                  Algeria                 
  [4] American-Samoa           Andorra                  Angola                  
  [7] Anguilla                 Antigua-Barbuda          Argentina               
 [10] Argentine                Australia                Austria                 
 [13] Bahamas                  Bahrain                  Bangladesh              
 [16] Barbados                 Belgium                  Belize                  
 [19] Benin                    Bermuda                  Bhutan                  
 [22] Bolivia                  Botswana                 Brazil                  
 [25] British-Virgin-Isles     Brunei                   Bulgaria                
 [28] Burkina                  Burma                    Burundi                 
 [31] Cameroon                 Canada                   Cape-Verde-Islands      
 [34] Cayman-Islands           Central-African-Republic Chad                    
 [37] Chile                    China                    Colombia                
 [40] Comorro-Islands          Congo                    Cook-Islands            
 [43] Costa-Rica               Cuba                     Cyprus                  
 [46] Czechoslovakia           Denmark                  Djibouti                
 [49] Dominica                 Dominican-Republic       Ecuador                 
 [52] Egypt                    El-Salvador              Equatorial-Guinea       
 [55] Ethiopia                 Faeroes                  Falklands-Malvinas      
 [58] Fiji                     Finland                  France                  
 [61] French-Guiana            French-Polynesia         Gabon                   
 [64] Gambia                   Germany-DDR              Germany-FRG             
 [67] Ghana                    Gibraltar                Greece                  
 [70] Greenland                Grenada                  Guam                    
 [73] Guatemala                Guinea                   Guinea-Bissau           
 [76] Guyana                   Haiti                    Honduras                
 [79] Hong-Kong                Hungary                  Iceland                 
 [82] India                    Indonesia                Iran                    
 [85] Iraq                     Ireland                  Israel                  
 [88] Italy                    Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                   Kampuchea               
 [94] Kenya                    Kiribati                 Kuwait                  
 [97] Laos                     Lebanon                  Lesotho                 
[100] Liberia                  Libya                    Liechtenstein           
[103] Luxembourg               Malagasy                 Malawi                  
[106] Malaysia                 Maldive-Islands          Mali                    
[109] Malta                    Marianas                 Mauritania              
[112] Mauritius                Mexico                   Micronesia              
[115] Monaco                   Mongolia                 Montserrat              
[118] Morocco                  Mozambique               Nauru                   
[121] Nepal                    Netherlands              Netherlands-Antilles    
[124] New-Zealand              Nicaragua                Niger                   
[127] Nigeria                  Niue                     North-Korea             
[130] North-Yemen              Norway                   Oman                    
[133] Pakistan                 Panama                   Papua-New-Guinea        
[136] Parguay                  Peru                     Philippines             
[139] Poland                   Portugal                 Puerto-Rico             
[142] Qatar                    Romania                  Rwanda                  
[145] San-Marino               Sao-Tome                 Saudi-Arabia            
[148] Senegal                  Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands          Somalia                 
[154] South-Africa             South-Korea              South-Yemen             
[157] Spain                    Sri-Lanka                St-Helena               
[160] St-Kitts-Nevis           St-Lucia                 St-Vincent              
[163] Sudan                    Surinam                  Swaziland               
[166] Sweden                   Switzerland              Syria                   
[169] Taiwan                   Tanzania                 Thailand                
[172] Togo                     Tonga                    Trinidad-Tobago         
[175] Tunisia                  Turkey                   Turks-Cocos-Islands     
[178] Tuvalu                   UAE                      Uganda                  
[181] UK                       Uruguay                  US-Virgin-Isles         
[184] USA                      USSR                     Vanuatu                 
[187] Vatican-City             Venezuela                Vietnam                 
[190] Western-Samoa            Yugoslavia               Zaire                   
[193] Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143    31
 [13]    23   113    47  1099   600  8512     6   111   274   678    28   474
 [25]  9976     4   623  1284   757  9561  1139     2   342    51   115     9
 [37]   128    43    22    49   284  1001    21  1222    12    18   337   547
 [49]    91   268    10   108   249   239   132  2176   109   246    36   215
 [61]   112    93   103  3268  1904  1648   435    70   301   323    11   372
 [73]    98   181   583   236    30  1760     3   587   118   333  1240  1031
 [85]  1973  1566   447   783   140    41  1267   925   121   195   324   212
 [97]   804    76   463   407  1285   300   313    92   237    26  2150   196
[109]    72   637  1221    99   288   505    66  2506    63    17   450   185
[121]   945   514    57     5   164   781   245   178  9363 22402    15   912
[133]   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9   35
[16]    4   24    2   11 1008    5   47   31   54   17   61   14  684  157   39
[31]   57  118   13   77   12   56   18   84   48   36   22   29   38   49   45
[46]  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| Keep working like that and you'll get there!

  |=============================================================          |  86%

| Since unique_vals is a list, you can use what you've learned to determine the
| length of each element of unique_vals (i.e. the number of unique values for
| each variable). Simplify the result, if possible. Hint: Apply the length()
| function to each element of unique_vals.

> lapply(unique_vals, length)
$name
[1] 194

$landmass
[1] 6

$zone
[1] 4

$area
[1] 136

$population
[1] 48

$language
[1] 10

$religion
[1] 8

$bars
[1] 5

$stripes
[1] 12

$colours
[1] 8

$red
[1] 2

$green
[1] 2

$blue
[1] 2

$gold
[1] 2

$white
[1] 2

$black
[1] 2

$orange
[1] 2

$mainhue
[1] 8

$circles
[1] 4

$crosses
[1] 3

$saltires
[1] 2

$quarters
[1] 3

$sunstars
[1] 14

$crescent
[1] 2

$triangle
[1] 2

$icon
[1] 2

$animate
[1] 2

$text
[1] 2

$topleft
[1] 7

$botright
[1] 8


| Not quite, but you're learning! Try again. Or, type info() for more options.

| Apply the length() function to each element of the unique_vals list using
| sapply(). Remember, no parentheses after the name of the function you are
| applying (i.e. length).

> sapply(unique_vals, length)
      name   landmass       zone       area population   language   religion 
       194          6          4        136         48         10          8 
      bars    stripes    colours        red      green       blue       gold 
         5         12          8          2          2          2          2 
     white      black     orange    mainhue    circles    crosses   saltires 
         2          2          2          8          4          3          2 
  quarters   sunstars   crescent   triangle       icon    animate       text 
         3         14          2          2          2          2          2 
   topleft   botright 
         7          8 

| That's correct!

  |==============================================================         |  88%

| The fact that the elements of the unique_vals list are all vectors of
| *different* length poses a problem for sapply(), since there's no obvious way
| of simplifying the result.

...

  |================================================================       |  90%

| Use sapply() to apply the unique() function to each column of the flags
| dataset to see that you get the same unsimplified list that you got from
| lapply().

> sapply(flags, unique)
$name
  [1] Afghanistan              Albania                  Algeria                 
  [4] American-Samoa           Andorra                  Angola                  
  [7] Anguilla                 Antigua-Barbuda          Argentina               
 [10] Argentine                Australia                Austria                 
 [13] Bahamas                  Bahrain                  Bangladesh              
 [16] Barbados                 Belgium                  Belize                  
 [19] Benin                    Bermuda                  Bhutan                  
 [22] Bolivia                  Botswana                 Brazil                  
 [25] British-Virgin-Isles     Brunei                   Bulgaria                
 [28] Burkina                  Burma                    Burundi                 
 [31] Cameroon                 Canada                   Cape-Verde-Islands      
 [34] Cayman-Islands           Central-African-Republic Chad                    
 [37] Chile                    China                    Colombia                
 [40] Comorro-Islands          Congo                    Cook-Islands            
 [43] Costa-Rica               Cuba                     Cyprus                  
 [46] Czechoslovakia           Denmark                  Djibouti                
 [49] Dominica                 Dominican-Republic       Ecuador                 
 [52] Egypt                    El-Salvador              Equatorial-Guinea       
 [55] Ethiopia                 Faeroes                  Falklands-Malvinas      
 [58] Fiji                     Finland                  France                  
 [61] French-Guiana            French-Polynesia         Gabon                   
 [64] Gambia                   Germany-DDR              Germany-FRG             
 [67] Ghana                    Gibraltar                Greece                  
 [70] Greenland                Grenada                  Guam                    
 [73] Guatemala                Guinea                   Guinea-Bissau           
 [76] Guyana                   Haiti                    Honduras                
 [79] Hong-Kong                Hungary                  Iceland                 
 [82] India                    Indonesia                Iran                    
 [85] Iraq                     Ireland                  Israel                  
 [88] Italy                    Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                   Kampuchea               
 [94] Kenya                    Kiribati                 Kuwait                  
 [97] Laos                     Lebanon                  Lesotho                 
[100] Liberia                  Libya                    Liechtenstein           
[103] Luxembourg               Malagasy                 Malawi                  
[106] Malaysia                 Maldive-Islands          Mali                    
[109] Malta                    Marianas                 Mauritania              
[112] Mauritius                Mexico                   Micronesia              
[115] Monaco                   Mongolia                 Montserrat              
[118] Morocco                  Mozambique               Nauru                   
[121] Nepal                    Netherlands              Netherlands-Antilles    
[124] New-Zealand              Nicaragua                Niger                   
[127] Nigeria                  Niue                     North-Korea             
[130] North-Yemen              Norway                   Oman                    
[133] Pakistan                 Panama                   Papua-New-Guinea        
[136] Parguay                  Peru                     Philippines             
[139] Poland                   Portugal                 Puerto-Rico             
[142] Qatar                    Romania                  Rwanda                  
[145] San-Marino               Sao-Tome                 Saudi-Arabia            
[148] Senegal                  Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands          Somalia                 
[154] South-Africa             South-Korea              South-Yemen             
[157] Spain                    Sri-Lanka                St-Helena               
[160] St-Kitts-Nevis           St-Lucia                 St-Vincent              
[163] Sudan                    Surinam                  Swaziland               
[166] Sweden                   Switzerland              Syria                   
[169] Taiwan                   Tanzania                 Thailand                
[172] Togo                     Tonga                    Trinidad-Tobago         
[175] Tunisia                  Turkey                   Turks-Cocos-Islands     
[178] Tuvalu                   UAE                      Uganda                  
[181] UK                       Uruguay                  US-Virgin-Isles         
[184] USA                      USSR                     Vanuatu                 
[187] Vatican-City             Venezuela                Vietnam                 
[190] Western-Samoa            Yugoslavia               Zaire                   
[193] Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143    31
 [13]    23   113    47  1099   600  8512     6   111   274   678    28   474
 [25]  9976     4   623  1284   757  9561  1139     2   342    51   115     9
 [37]   128    43    22    49   284  1001    21  1222    12    18   337   547
 [49]    91   268    10   108   249   239   132  2176   109   246    36   215
 [61]   112    93   103  3268  1904  1648   435    70   301   323    11   372
 [73]    98   181   583   236    30  1760     3   587   118   333  1240  1031
 [85]  1973  1566   447   783   140    41  1267   925   121   195   324   212
 [97]   804    76   463   407  1285   300   313    92   237    26  2150   196
[109]    72   637  1221    99   288   505    66  2506    63    17   450   185
[121]   945   514    57     5   164   781   245   178  9363 22402    15   912
[133]   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9   35
[16]    4   24    2   11 1008    5   47   31   54   17   61   14  684  157   39
[31]   57  118   13   77   12   56   18   84   48   36   22   29   38   49   45
[46]  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| Excellent work!

  |=================================================================      |  92%

| Occasionally, you may need to apply a function that is not yet defined, thus
| requiring you to write your own. Writing functions in R is beyond the scope of
| this lesson, but let's look at a quick example of how you might do so in the
| context of loop functions.

...

  |===================================================================    |  94%

| Pretend you are interested in only the second item from each element of the
| unique_vals list that you just created. Since each element of the unique_vals
| list is a vector and we're not aware of any built-in function in R that
| returns the second element of a vector, we will construct our own function.

...

  |====================================================================   |  96%

| lapply(unique_vals, function(elem) elem[2]) will return a list containing the
| second item from each element of the unique_vals list. Note that our function
| takes one argument, elem, which is just a 'dummy variable' that takes on the
| value of each element of unique_vals, in turn.

> 
> lapply(unique_vals, function(elem) elem[2])
$name
[1] Albania
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra ... Zimbabwe

$landmass
[1] 3

$zone
[1] 3

$area
[1] 29

$population
[1] 3

$language
[1] 6

$religion
[1] 6

$bars
[1] 2

$stripes
[1] 0

$colours
[1] 3

$red
[1] 0

$green
[1] 0

$blue
[1] 1

$gold
[1] 0

$white
[1] 0

$black
[1] 0

$orange
[1] 1

$mainhue
[1] red
Levels: black blue brown gold green orange red white

$circles
[1] 1

$crosses
[1] 1

$saltires
[1] 1

$quarters
[1] 1

$sunstars
[1] 0

$crescent
[1] 1

$triangle
[1] 1

$icon
[1] 0

$animate
[1] 1

$text
[1] 1

$topleft
[1] red
Levels: black blue gold green orange red white

$botright
[1] red
Levels: black blue brown gold green orange red white


| Keep working like that and you'll get there!

  |====================================================================== |  98%

| The only difference between previous examples and this one is that we are
| defining and using our own function right in the call to lapply(). Our
| function has no name and disappears as soon as lapply() is done using it.
| So-called 'anonymous functions' can be very useful when one of R's built-in
| functions isn't an option.

...

  |=======================================================================| 100%

| In this lesson, you learned how to use the powerful lapply() and sapply()
| functions to apply an operation over the elements of a list. In the next
| lesson, we'll take a look at some close relatives of lapply() and sapply().

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011, lapply_and_sapply.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 10

  |                                                                       |   0%

| In the last lesson, you learned about the two most fundamental members of R's
| *apply family of functions: lapply() and sapply(). Both take a list as input,
| apply a function to each element of the list, then combine and return the
| result. lapply() always returns a list, whereas sapply() attempts to simplify
| the result.

...

  |===                                                                    |   4%

| In this lesson, you'll learn how to use vapply() and tapply(), each of which
| serves a very specific purpose within the Split-Apply-Combine methodology. For
| consistency, we'll use the same dataset we used in the 'lapply and sapply'
| lesson.

...

  |======                                                                 |   8%

| The Flags dataset from the UCI Machine Learning Repository contains details of
| various nations and their flags. More information may be found here:
| http://archive.ics.uci.edu/ml/datasets/Flags

...

  |=========                                                              |  12%

| I've stored the data in a variable called flags. If it's been a while since
| you completed the 'lapply and sapply' lesson, you may want to reacquaint
| yourself with the data by using functions like dim(), head(), str(), and
| summary() when you return to the prompt (>). You can also type viewinfo() at
| the prompt to bring up some documentation for the dataset. Let's get started!

...

  |============                                                           |  17%

| As you saw in the last lesson, the unique() function returns a vector of the
| unique values contained in the object passed to it. Therefore, sapply(flags,
| unique) returns a list containing one vector of unique values for each column
| of the flags dataset. Try it again now.

> sapply(flags, unique)
$name
  [1] Afghanistan              Albania                  Algeria                 
  [4] American-Samoa           Andorra                  Angola                  
  [7] Anguilla                 Antigua-Barbuda          Argentina               
 [10] Argentine                Australia                Austria                 
 [13] Bahamas                  Bahrain                  Bangladesh              
 [16] Barbados                 Belgium                  Belize                  
 [19] Benin                    Bermuda                  Bhutan                  
 [22] Bolivia                  Botswana                 Brazil                  
 [25] British-Virgin-Isles     Brunei                   Bulgaria                
 [28] Burkina                  Burma                    Burundi                 
 [31] Cameroon                 Canada                   Cape-Verde-Islands      
 [34] Cayman-Islands           Central-African-Republic Chad                    
 [37] Chile                    China                    Colombia                
 [40] Comorro-Islands          Congo                    Cook-Islands            
 [43] Costa-Rica               Cuba                     Cyprus                  
 [46] Czechoslovakia           Denmark                  Djibouti                
 [49] Dominica                 Dominican-Republic       Ecuador                 
 [52] Egypt                    El-Salvador              Equatorial-Guinea       
 [55] Ethiopia                 Faeroes                  Falklands-Malvinas      
 [58] Fiji                     Finland                  France                  
 [61] French-Guiana            French-Polynesia         Gabon                   
 [64] Gambia                   Germany-DDR              Germany-FRG             
 [67] Ghana                    Gibraltar                Greece                  
 [70] Greenland                Grenada                  Guam                    
 [73] Guatemala                Guinea                   Guinea-Bissau           
 [76] Guyana                   Haiti                    Honduras                
 [79] Hong-Kong                Hungary                  Iceland                 
 [82] India                    Indonesia                Iran                    
 [85] Iraq                     Ireland                  Israel                  
 [88] Italy                    Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                   Kampuchea               
 [94] Kenya                    Kiribati                 Kuwait                  
 [97] Laos                     Lebanon                  Lesotho                 
[100] Liberia                  Libya                    Liechtenstein           
[103] Luxembourg               Malagasy                 Malawi                  
[106] Malaysia                 Maldive-Islands          Mali                    
[109] Malta                    Marianas                 Mauritania              
[112] Mauritius                Mexico                   Micronesia              
[115] Monaco                   Mongolia                 Montserrat              
[118] Morocco                  Mozambique               Nauru                   
[121] Nepal                    Netherlands              Netherlands-Antilles    
[124] New-Zealand              Nicaragua                Niger                   
[127] Nigeria                  Niue                     North-Korea             
[130] North-Yemen              Norway                   Oman                    
[133] Pakistan                 Panama                   Papua-New-Guinea        
[136] Parguay                  Peru                     Philippines             
[139] Poland                   Portugal                 Puerto-Rico             
[142] Qatar                    Romania                  Rwanda                  
[145] San-Marino               Sao-Tome                 Saudi-Arabia            
[148] Senegal                  Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands          Somalia                 
[154] South-Africa             South-Korea              South-Yemen             
[157] Spain                    Sri-Lanka                St-Helena               
[160] St-Kitts-Nevis           St-Lucia                 St-Vincent              
[163] Sudan                    Surinam                  Swaziland               
[166] Sweden                   Switzerland              Syria                   
[169] Taiwan                   Tanzania                 Thailand                
[172] Togo                     Tonga                    Trinidad-Tobago         
[175] Tunisia                  Turkey                   Turks-Cocos-Islands     
[178] Tuvalu                   UAE                      Uganda                  
[181] UK                       Uruguay                  US-Virgin-Isles         
[184] USA                      USSR                     Vanuatu                 
[187] Vatican-City             Venezuela                Vietnam                 
[190] Western-Samoa            Yugoslavia               Zaire                   
[193] Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143    31
 [13]    23   113    47  1099   600  8512     6   111   274   678    28   474
 [25]  9976     4   623  1284   757  9561  1139     2   342    51   115     9
 [37]   128    43    22    49   284  1001    21  1222    12    18   337   547
 [49]    91   268    10   108   249   239   132  2176   109   246    36   215
 [61]   112    93   103  3268  1904  1648   435    70   301   323    11   372
 [73]    98   181   583   236    30  1760     3   587   118   333  1240  1031
 [85]  1973  1566   447   783   140    41  1267   925   121   195   324   212
 [97]   804    76   463   407  1285   300   313    92   237    26  2150   196
[109]    72   637  1221    99   288   505    66  2506    63    17   450   185
[121]   945   514    57     5   164   781   245   178  9363 22402    15   912
[133]   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9   35
[16]    4   24    2   11 1008    5   47   31   54   17   61   14  684  157   39
[31]   57  118   13   77   12   56   18   84   48   36   22   29   38   49   45
[46]  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| Perseverance, that's the answer.

  |===============                                                        |  21%

| What if you had forgotten how unique() works and mistakenly thought it returns
| the *number* of unique values contained in the object passed to it? Then you
| might have incorrectly expected sapply(flags, unique) to return a numeric
| vector, since each element of the list returned would contain a single number
| and sapply() could then simplify the result to a vector.

...

  |==================                                                     |  25%

| When working interactively (at the prompt), this is not much of a problem,
| since you see the result immediately and will quickly recognize your mistake.
| However, when working non-interactively (e.g. writing your own functions), a
| misunderstanding may go undetected and cause incorrect results later on.
| Therefore, you may wish to be more careful and that's where vapply() is
| useful.

...

  |=====================                                                  |  29%

| Whereas sapply() tries to 'guess' the correct format of the result, vapply()
| allows you to specify it explicitly. If the result doesn't match the format
| you specify, vapply() will throw an error, causing the operation to stop. This
| can prevent significant problems in your code that might be caused by getting
| unexpected return values from sapply().

...

  |========================                                               |  33%

| Try vapply(flags, unique, numeric(1)), which says that you expect each element
| of the result to be a numeric vector of length 1. Since this is NOT actually
| the case, YOU WILL GET AN ERROR. Once you get the error, type ok() to continue
| to the next question.

> vapply(flags, unique, numeric(1))
Error in vapply(flags, unique, numeric(1)) : values must be length 1,
 but FUN(X[[1]]) result is length 194
> ok()

| That's correct!

  |===========================                                            |  38%

| Recall from the previous lesson that sapply(flags, class) will return a
| character vector containing the class of each column in the dataset. Try that
| again now to see the result.

> sapply(flags, class)
      name   landmass       zone       area population   language   religion 
  "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
      bars    stripes    colours        red      green       blue       gold 
 "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
     white      black     orange    mainhue    circles    crosses   saltires 
 "integer"  "integer"  "integer"   "factor"  "integer"  "integer"  "integer" 
  quarters   sunstars   crescent   triangle       icon    animate       text 
 "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
   topleft   botright 
  "factor"   "factor" 

| All that hard work is paying off!

  |==============================                                         |  42%

| If we wish to be explicit about the format of the result we expect, we can use
| vapply(flags, class, character(1)). The 'character(1)' argument tells R that
| we expect the class function to return a character vector of length 1 when
| applied to EACH column of the flags dataset. Try it now.

> vapply(flags, class, character(1))
      name   landmass       zone       area population   language   religion 
  "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
      bars    stripes    colours        red      green       blue       gold 
 "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
     white      black     orange    mainhue    circles    crosses   saltires 
 "integer"  "integer"  "integer"   "factor"  "integer"  "integer"  "integer" 
  quarters   sunstars   crescent   triangle       icon    animate       text 
 "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
   topleft   botright 
  "factor"   "factor" 

| That's the answer I was looking for.

  |=================================                                      |  46%

| Note that since our expectation was correct (i.e. character(1)), the vapply()
| result is identical to the sapply() result -- a character vector of column
| classes.

...

  |====================================                                   |  50%

| You might think of vapply() as being 'safer' than sapply(), since it requires
| you to specify the format of the output in advance, instead of just allowing R
| to 'guess' what you wanted. In addition, vapply() may perform faster than
| sapply() for large datasets. However, when doing data analysis interactively
| (at the prompt), sapply() saves you some typing and will often be good enough.

...

  |======================================                                 |  54%

| As a data analyst, you'll often wish to split your data up into groups based
| on the value of some variable, then apply a function to the members of each
| group. The next function we'll look at, tapply(), does exactly that.

...

  |=========================================                              |  58%

| Use ?tapply to pull up the documentation.

> ?tapply

| You got it!

  |============================================                           |  62%

| The 'landmass' variable in our dataset takes on integer values between 1 and
| 6, each of which represents a different part of the world. Use
| table(flags$landmass) to see how many flags/countries fall into each group.

> table(flags$landmass)

 1  2  3  4  5  6 
31 17 35 52 39 20 

| Excellent job!

  |===============================================                        |  67%

| The 'animate' variable in our dataset takes the value 1 if a country's flag
| contains an animate image (e.g. an eagle, a tree, a human hand) and 0
| otherwise. Use table(flags$animate) to see how many flags contain an animate
| image.

> table(flags$animate)

  0   1 
155  39 

| You nailed it! Good job!

  |==================================================                     |  71%

| This tells us that 39 flags contain an animate object (animate = 1) and 155 do
| not (animate = 0).

...

  |=====================================================                  |  75%

| If you take the arithmetic mean of a bunch of 0s and 1s, you get the
| proportion of 1s. Use tapply(flags$animate, flags$landmass, mean) to apply the
| mean function to the 'animate' variable separately for each of the six
| landmass groups, thus giving us the proportion of flags containing an animate
| image WITHIN each landmass group.

> tapply(flags$animate, flags$landmass, mean)
        1         2         3         4         5         6 
0.4193548 0.1764706 0.1142857 0.1346154 0.1538462 0.3000000 

| Keep working like that and you'll get there!

  |========================================================               |  79%

| The first landmass group (landmass = 1) corresponds to North America and
| contains the highest proportion of flags with an animate image (0.4194).

...

  |===========================================================            |  83%

| Similarly, we can look at a summary of population values (in round millions)
| for countries with and without the color red on their flag with
| tapply(flags$population, flags$red, summary).

> tapply(flags$population, flags$red, summary)
$`0`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    3.00   27.63    9.00  684.00 

$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    0.0     0.0     4.0    22.1    15.0  1008.0 


| Excellent work!

  |==============================================================         |  88%

| What is the median population (in millions) for countries *without* the color
| red on their flag?

1: 27.6
2: 0.0
3: 22.1
4: 9.0
5: 3.0
6: 4.0

Selection: 5

| You got it right!

  |=================================================================      |  92%

| Lastly, use the same approach to look at a summary of population values for
| each of the six landmasses.

> tapply(flags$population, flags$landmass, summary)
$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    0.00   12.29    4.50  231.00 

$`2`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    1.00    6.00   15.71   15.00  119.00 

$`3`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    8.00   13.86   16.00   61.00 

$`4`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   1.000   5.000   8.788   9.750  56.000 

$`5`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    2.00   10.00   69.18   39.00 1008.00 

$`6`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    0.00   11.30    1.25  157.00 


| Your dedication is inspiring!

  |====================================================================   |  96%

| What is the maximum population (in millions) for the fourth landmass group
| (Africa)?

1: 1010.0
2: 56.00
3: 157.00
4: 119.0
5: 5.00

Selection: 2

| Keep up the great work!

  |=======================================================================| 100%

| In this lesson, you learned how to use vapply() as a safer alternative to
| sapply(), which is most helpful when writing your own functions. You also
| learned how to use tapply() to split your data into groups based on the value
| of some variable, then apply a function to each group. These functions will
| come in handy on your quest to become a better data analyst.

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011, vapply_and_tapply.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 11

  |                                                                       |   0%

| Whenever you're working with a new dataset, the first thing you should do is
| look at it! What is the format of the data? What are the dimensions? What are
| the variable names? How are the variables stored? Are there missing data? Are
| there any flaws in the data?

...

  |===                                                                    |   4%

| This lesson will teach you how to answer these questions and more using R's
| built-in functions. We'll be using a dataset constructed from the United
| States Department of Agriculture's PLANTS Database
| (http://plants.usda.gov/adv_search.html).

...

  |======                                                                 |   8%

| I've stored the data for you in a variable called plants. Type ls() to list
| the variables in your workspace, among which should be plants.

> ls()
 [1] "cls_list"    "cls_vect"    "flag_colors" "flag_shapes" "flags"      
 [6] "ok"          "plants"      "shape_mat"   "unique_vals" "viewinfo"   

| You got it!

  |=========                                                              |  12%

| Let's begin by checking the class of the plants variable with class(plants).
| This will give us a clue as to the overall structure of the data.

> class(plants)
[1] "data.frame"

| You got it!

  |============                                                           |  17%

| It's very common for data to be stored in a data frame. It is the default
| class for data read into R using functions like read.csv() and read.table(),
| which you'll learn about in another lesson.

...

  |===============                                                        |  21%

| Since the dataset is stored in a data frame, we know it is rectangular. In
| other words, it has two dimensions (rows and columns) and fits neatly into a
| table or spreadsheet. Use dim(plants) to see exactly how many rows and columns
| we're dealing with.

> dim(plants)
[1] 5166   10

| Keep working like that and you'll get there!

  |==================                                                     |  25%

| The first number you see (5166) is the number of rows (observations) and the
| second number (10) is the number of columns (variables).

...

  |=====================                                                  |  29%

| You can also use nrow(plants) to see only the number of rows. Try it out.

> nrow(plants)
[1] 5166

| You are really on a roll!

  |========================                                               |  33%

| ... And ncol(plants) to see only the number of columns.

> ncol(plants)
[1] 10

| You are quite good my friend!

  |===========================                                            |  38%

| If you are curious as to how much space the dataset is occupying in memory,
| you can use object.size(plants).

> object.size(plants)
538888 bytes

| You are really on a roll!

  |==============================                                         |  42%

| Now that we have a sense of the shape and size of the dataset, let's get a
| feel for what's inside. names(plants) will return a character vector of column
| (i.e. variable) names. Give it a shot.

> names(plants)
 [1] "Scientific_Name"      "Duration"             "Active_Growth_Period"
 [4] "Foliage_Color"        "pH_Min"               "pH_Max"              
 [7] "Precip_Min"           "Precip_Max"           "Shade_Tolerance"     
[10] "Temp_Min_F"          

| Perseverance, that's the answer.

  |=================================                                      |  46%

| We've applied fairly descriptive variable names to this dataset, but that
| won't always be the case. A logical next step is to peek at the actual data.
| However, our dataset contains over 5000 observations (rows), so it's
| impractical to view the whole thing all at once.

...

  |====================================                                   |  50%

| The head() function allows you to preview the top of the dataset. Give it a
| try with only one argument.

> head(plants)
               Scientific_Name          Duration Active_Growth_Period
1                  Abelmoschus              <NA>                 <NA>
2       Abelmoschus esculentus Annual, Perennial                 <NA>
3                        Abies              <NA>                 <NA>
4               Abies balsamea         Perennial    Spring and Summer
5 Abies balsamea var. balsamea         Perennial                 <NA>
6                     Abutilon              <NA>                 <NA>
  Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance Temp_Min_F
1          <NA>     NA     NA         NA         NA            <NA>         NA
2          <NA>     NA     NA         NA         NA            <NA>         NA
3          <NA>     NA     NA         NA         NA            <NA>         NA
4         Green      4      6         13         60        Tolerant        -43
5          <NA>     NA     NA         NA         NA            <NA>         NA
6          <NA>     NA     NA         NA         NA            <NA>         NA

| All that practice is paying off!

  |======================================                                 |  54%

| Take a minute to look through and understand the the output above. Each row is
| labeled with the observation number and each column with the variable name.
| Your screen is probably not wide enough to view all 10 columns side-by-side,
| in which case R displays as many columns as it can on each line before
| continuing on the next.

...

  |=========================================                              |  58%

| By default, head() shows you the first six rows of the data. You can alter
| this behavior by passing as a second argument the number of rows you'd like to
| view. Use head() to preview the first 10 rows of plants.

> head(plants, n = 10L)
                     Scientific_Name          Duration Active_Growth_Period
1                        Abelmoschus              <NA>                 <NA>
2             Abelmoschus esculentus Annual, Perennial                 <NA>
3                              Abies              <NA>                 <NA>
4                     Abies balsamea         Perennial    Spring and Summer
5       Abies balsamea var. balsamea         Perennial                 <NA>
6                           Abutilon              <NA>                 <NA>
7               Abutilon theophrasti            Annual                 <NA>
8                             Acacia              <NA>                 <NA>
9                  Acacia constricta         Perennial    Spring and Summer
10 Acacia constricta var. constricta         Perennial                 <NA>
   Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance Temp_Min_F
1           <NA>     NA     NA         NA         NA            <NA>         NA
2           <NA>     NA     NA         NA         NA            <NA>         NA
3           <NA>     NA     NA         NA         NA            <NA>         NA
4          Green      4    6.0         13         60        Tolerant        -43
5           <NA>     NA     NA         NA         NA            <NA>         NA
6           <NA>     NA     NA         NA         NA            <NA>         NA
7           <NA>     NA     NA         NA         NA            <NA>         NA
8           <NA>     NA     NA         NA         NA            <NA>         NA
9          Green      7    8.5          4         20      Intolerant        -13
10          <NA>     NA     NA         NA         NA            <NA>         NA

| That's not the answer I was looking for, but try again. Or, type info() for
| more options.

| head(plants, 10) will show you the first 10 rows of the dataset.

> head(plants, 10)
                     Scientific_Name          Duration Active_Growth_Period
1                        Abelmoschus              <NA>                 <NA>
2             Abelmoschus esculentus Annual, Perennial                 <NA>
3                              Abies              <NA>                 <NA>
4                     Abies balsamea         Perennial    Spring and Summer
5       Abies balsamea var. balsamea         Perennial                 <NA>
6                           Abutilon              <NA>                 <NA>
7               Abutilon theophrasti            Annual                 <NA>
8                             Acacia              <NA>                 <NA>
9                  Acacia constricta         Perennial    Spring and Summer
10 Acacia constricta var. constricta         Perennial                 <NA>
   Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance Temp_Min_F
1           <NA>     NA     NA         NA         NA            <NA>         NA
2           <NA>     NA     NA         NA         NA            <NA>         NA
3           <NA>     NA     NA         NA         NA            <NA>         NA
4          Green      4    6.0         13         60        Tolerant        -43
5           <NA>     NA     NA         NA         NA            <NA>         NA
6           <NA>     NA     NA         NA         NA            <NA>         NA
7           <NA>     NA     NA         NA         NA            <NA>         NA
8           <NA>     NA     NA         NA         NA            <NA>         NA
9          Green      7    8.5          4         20      Intolerant        -13
10          <NA>     NA     NA         NA         NA            <NA>         NA

| All that hard work is paying off!

  |============================================                           |  62%

| The same applies for using tail() to preview the end of the dataset. Use
| tail() to view the last 15 rows.

> tail(plants, 15)
                      Scientific_Name  Duration Active_Growth_Period
5152                          Zizania      <NA>                 <NA>
5153                 Zizania aquatica    Annual               Spring
5154   Zizania aquatica var. aquatica    Annual                 <NA>
5155                Zizania palustris    Annual                 <NA>
5156 Zizania palustris var. palustris    Annual                 <NA>
5157                      Zizaniopsis      <NA>                 <NA>
5158             Zizaniopsis miliacea Perennial    Spring and Summer
5159                            Zizia      <NA>                 <NA>
5160                     Zizia aptera Perennial                 <NA>
5161                      Zizia aurea Perennial                 <NA>
5162                 Zizia trifoliata Perennial                 <NA>
5163                          Zostera      <NA>                 <NA>
5164                   Zostera marina Perennial                 <NA>
5165                           Zoysia      <NA>                 <NA>
5166                  Zoysia japonica Perennial                 <NA>
     Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance
5152          <NA>     NA     NA         NA         NA            <NA>
5153         Green    6.4    7.4         30         50      Intolerant
5154          <NA>     NA     NA         NA         NA            <NA>
5155          <NA>     NA     NA         NA         NA            <NA>
5156          <NA>     NA     NA         NA         NA            <NA>
5157          <NA>     NA     NA         NA         NA            <NA>
5158         Green    4.3    9.0         35         70      Intolerant
5159          <NA>     NA     NA         NA         NA            <NA>
5160          <NA>     NA     NA         NA         NA            <NA>
5161          <NA>     NA     NA         NA         NA            <NA>
5162          <NA>     NA     NA         NA         NA            <NA>
5163          <NA>     NA     NA         NA         NA            <NA>
5164          <NA>     NA     NA         NA         NA            <NA>
5165          <NA>     NA     NA         NA         NA            <NA>
5166          <NA>     NA     NA         NA         NA            <NA>
     Temp_Min_F
5152         NA
5153         32
5154         NA
5155         NA
5156         NA
5157         NA
5158         12
5159         NA
5160         NA
5161         NA
5162         NA
5163         NA
5164         NA
5165         NA
5166         NA

| That's the answer I was looking for.

  |===============================================                        |  67%

| After previewing the top and bottom of the data, you probably noticed lots of
| NAs, which are R's placeholders for missing values. Use summary(plants) to get
| a better feel for how each variable is distributed and how much of the dataset
| is missing.

> summary(plants)
                     Scientific_Name              Duration   
 Abelmoschus                 :   1   Perennial        :3031  
 Abelmoschus esculentus      :   1   Annual           : 682  
 Abies                       :   1   Annual, Perennial: 179  
 Abies balsamea              :   1   Annual, Biennial :  95  
 Abies balsamea var. balsamea:   1   Biennial         :  57  
 Abutilon                    :   1   (Other)          :  92  
 (Other)                     :5160   NA's             :1030  
           Active_Growth_Period      Foliage_Color      pH_Min     
 Spring and Summer   : 447      Dark Green  :  82   Min.   :3.000  
 Spring              : 144      Gray-Green  :  25   1st Qu.:4.500  
 Spring, Summer, Fall:  95      Green       : 692   Median :5.000  
 Summer              :  92      Red         :   4   Mean   :4.997  
 Summer and Fall     :  24      White-Gray  :   9   3rd Qu.:5.500  
 (Other)             :  30      Yellow-Green:  20   Max.   :7.000  
 NA's                :4334      NA's        :4334   NA's   :4327   
     pH_Max         Precip_Min      Precip_Max         Shade_Tolerance
 Min.   : 5.100   Min.   : 4.00   Min.   : 16.00   Intermediate: 242  
 1st Qu.: 7.000   1st Qu.:16.75   1st Qu.: 55.00   Intolerant  : 349  
 Median : 7.300   Median :28.00   Median : 60.00   Tolerant    : 246  
 Mean   : 7.344   Mean   :25.57   Mean   : 58.73   NA's        :4329  
 3rd Qu.: 7.800   3rd Qu.:32.00   3rd Qu.: 60.00                      
 Max.   :10.000   Max.   :60.00   Max.   :200.00                      
 NA's   :4327     NA's   :4338    NA's   :4338                        
   Temp_Min_F    
 Min.   :-79.00  
 1st Qu.:-38.00  
 Median :-33.00  
 Mean   :-22.53  
 3rd Qu.:-18.00  
 Max.   : 52.00  
 NA's   :4328    

| That's a job well done!

  |==================================================                     |  71%

| summary() provides different output for each variable, depending on its class.
| For numeric data such as Precip_Min, summary() displays the minimum, 1st
| quartile, median, mean, 3rd quartile, and maximum. These values help us
| understand how the data are distributed.

...

  |=====================================================                  |  75%

| For categorical variables (called 'factor' variables in R), summary() displays
| the number of times each value (or 'level') occurs in the data. For example,
| each value of Scientific_Name only appears once, since it is unique to a
| specific plant. In contrast, the summary for Duration (also a factor variable)
| tells us that our dataset contains 3031 Perennial plants, 682 Annual plants,
| etc.

...

  |========================================================               |  79%

| You can see that R truncated the summary for Active_Growth_Period by including
| a catch-all category called 'Other'. Since it is a categorical/factor
| variable, we can see how many times each value actually occurs in the data
| with table(plants$Active_Growth_Period).

> table(plants$Active_Growth_Period)

Fall, Winter and Spring                  Spring         Spring and Fall 
                     15                     144                      10 
      Spring and Summer    Spring, Summer, Fall                  Summer 
                    447                      95                      92 
        Summer and Fall              Year Round 
                     24                       5 

| You got it!

  |===========================================================            |  83%

| Each of the functions we've introduced so far has its place in helping you to
| better understand the structure of your data. However, we've left the best for
| last....

...

  |==============================================================         |  88%

| Perhaps the most useful and concise function for understanding the *str*ucture
| of your data is str(). Give it a try now.

> str(plants)
'data.frame':	5166 obs. of  10 variables:
 $ Scientific_Name     : Factor w/ 5166 levels "Abelmoschus",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ Duration            : Factor w/ 8 levels "Annual","Annual, Biennial",..: NA 4 NA 7 7 NA 1 NA 7 7 ...
 $ Active_Growth_Period: Factor w/ 8 levels "Fall, Winter and Spring",..: NA NA NA 4 NA NA NA NA 4 NA ...
 $ Foliage_Color       : Factor w/ 6 levels "Dark Green","Gray-Green",..: NA NA NA 3 NA NA NA NA 3 NA ...
 $ pH_Min              : num  NA NA NA 4 NA NA NA NA 7 NA ...
 $ pH_Max              : num  NA NA NA 6 NA NA NA NA 8.5 NA ...
 $ Precip_Min          : int  NA NA NA 13 NA NA NA NA 4 NA ...
 $ Precip_Max          : int  NA NA NA 60 NA NA NA NA 20 NA ...
 $ Shade_Tolerance     : Factor w/ 3 levels "Intermediate",..: NA NA NA 3 NA NA NA NA 2 NA ...
 $ Temp_Min_F          : int  NA NA NA -43 NA NA NA NA -13 NA ...

| You are really on a roll!

  |=================================================================      |  92%

| The beauty of str() is that it combines many of the features of the other
| functions you've already seen, all in a concise and readable format. At the
| very top, it tells us that the class of plants is 'data.frame' and that it has
| 5166 observations and 10 variables. It then gives us the name and class of
| each variable, as well as a preview of its contents.

...

  |====================================================================   |  96%

| str() is actually a very general function that you can use on most objects in
| R. Any time you want to understand the structure of something (a dataset,
| function, etc.), str() is a good place to start.

...

  |=======================================================================| 100%

| In this lesson, you learned how to get a feel for the structure and contents
| of a new dataset using a collection of simple and useful functions. Taking the
| time to do this upfront can save you time and frustration later on in your
| analysis.

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011, Looking_at_Data.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011, Looking_at_Data.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 12

  |                                                                       |   0%

| One of the great advantages of using a statistical programming language like R
| is its vast collection of tools for simulating random numbers.

...

  |==                                                                     |   3%

| This lesson assumes familiarity with a few common probability distributions,
| but these topics will only be discussed with respect to random number
| generation. Even if you have no prior experience with these concepts, you
| should be able to complete the lesson and understand the main ideas.

...

  |====                                                                   |   6%

| The first function we'll use to generate random numbers is sample(). Use
| ?sample to pull up the documentation.

> ?sample

| You are amazing!

  |=======                                                                |   9%

| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> sample(1:6, 4, replace = TRUE)
[1] 6 2 6 6

| Nice work!

  |=========                                                              |  12%

| Now repeat the command to see how your result differs. (The probability of
| rolling the exact same result is (1/6)^4 = 0.00077, which is pretty small!)

> sample(1:6, 4, replace = TRUE, prob = 0.00077)
Error in sample.int(length(x), size, replace, prob) : 
  incorrect number of probabilities
> sample(1:6, 4, replace = TRUE)
[1] 1 2 6 2

| That's the answer I was looking for.

  |===========                                                            |  16%

| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers
| between 1 and 6, WITH replacement. Sampling with replacement simply means that
| each number is "replaced" after it is selected, so that the same number can
| show up more than once. This is what we want here, since what you roll on one
| die shouldn't affect what you roll on any of the others.

...

  |=============                                                          |  19%

| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample without
| replacement, simply leave off the 'replace' argument.

> sample(1:20, 10)
 [1]  1  3  9 14 18  6 12 13 17  5

| Your dedication is inspiring!

  |================                                                       |  22%

| Since the last command sampled without replacement, no number appears more
| than once in the output.

...

  |==================                                                     |  25%

| LETTERS is a predefined variable in R containing a vector of all 26 letters of
| the English alphabet. Take a look at it now.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S"
[20] "T" "U" "V" "W" "X" "Y" "Z"

| That's a job well done!

  |====================                                                   |  28%

| The sample() function can also be used to permute, or rearrange, the elements
| of a vector. For example, try sample(LETTERS) to permute all 26 letters of the
| English alphabet.

> sample(LETTERS)
 [1] "H" "Q" "O" "Z" "S" "F" "U" "V" "J" "D" "L" "P" "N" "Y" "X" "I" "R" "M" "G"
[20] "T" "K" "C" "W" "E" "B" "A"

| You are really on a roll!

  |======================                                                 |  31%

| This is identical to taking a sample of size 26 from LETTERS, without
| replacement. When the 'size' argument to sample() is not specified, R takes a
| sample equal in size to the vector from which you are sampling.

...

  |========================                                               |  34%

| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This
| particular coin has a 0.3 probability of landing 'tails' and a 0.7 probability
| of landing 'heads'.

...

  |===========================                                            |  38%

| Let the value 0 represent tails and the value 1 represent heads. Use sample()
| to draw a sample of size 100 from the vector c(0,1), with replacement. Since
| the coin is unfair, we must attach specific probabilities to the values 0
| (tails) and 1 (heads) with a fourth argument, prob = c(0.3, 0.7). Assign the
| result to a new variable called flips.

> flips <- sample(0:1, 100, replace = TRUE)

| Give it another try. Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign the
| result: flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

> flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

| You're the best!

  |=============================                                          |  41%

| View the contents of the flips variable.

> flips
  [1] 0 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1
 [39] 1 1 1 0 0 1 1 0 0 0 0 1 0 0 1 0 1 0 0 1 1 1 1 1 0 1 0 0 1 1 1 1 0 1 1 0 1 1
 [77] 0 1 1 1 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0

| You got it right!

  |===============================                                        |  44%

| Since we set the probability of landing heads on any given flip to be 0.7,
| we'd expect approximately 70 of our coin flips to have the value 1. Count the
| actual number of 1s contained in flips using the sum() function.

> sum(flips)
[1] 69

| You're the best!

  |=================================                                      |  47%

| A coin flip is a binary outcome (0 or 1) and we are performing 100 independent
| trials (coin flips), so we can use use rbinom() to simulate a binomial random
| variable. Pull up the documentation for rbinom() using ?rbinom.

> ?rbinom

| You are really on a roll!

  |====================================                                   |  50%

| Each probability distribution in R has an r*** function (for "random"), a d***
| function (for "density"), a p*** (for "probability"), and q*** (for
| "quantile"). We are most interested in the r*** functions in this lesson, but
| I encourage you to explore the others on your own.

...

  |======================================                                 |  53%

| A binomial random variable represents the number of 'successes' (heads) in a
| given number of independent 'trials' (coin flips). Therefore, we can generate
| a single random variable that represents the number of heads in 100 flips of
| our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that you only
| specify the probability of 'success' (heads) and NOT the probability of
| 'failure' (tails). Try it now.

> rbinom(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
Error in rbinom(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7)) : 
  unused argument (replace = TRUE)
> rbinom(c(0,1), 100, prob = c(0.3, 0.7))
[1] 27 79

| Keep trying! Or, type info() for more options.

| Call rbinom() with n = 1, size = 100, and prob = 0.7.

> rbinom(1, 100, prob = c(0.3, 0.7)
+ 0)
Error: unexpected numeric constant in:
"rbinom(1, 100, prob = c(0.3, 0.7)
0"
> rbinom(1, 100, prob = c(0.3, 0.7))
[1] 33

| Not exactly. Give it another go. Or, type info() for more options.

| Call rbinom() with n = 1, size = 100, and prob = 0.7.

> info(rbinom)
Error in info(rbinom) : unused argument (rbinom)
> rbinom(1, 100, 0.7)
[1] 67

| Your dedication is inspiring!

  |========================================                               |  56%

| Equivalently, if we want to see all of the 0s and 1s, we can request 100
| observations, each of size 1, with success probability of 0.7. Give it a try,
| assigning the result to a new variable called flips2.

> flips2 <- rbinom(1, 100, 0.7)

| Almost! Try again. Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to
| flips2.

> flips2 <- rbinom(100, 1, 0.7)

| You are doing so well!

  |==========================================                             |  59%

| View the contents of flips2.

> flips2
  [1] 1 0 0 1 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 0 1 1 0
 [39] 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 0 0 1 1 0 0 1 1 1 1 0 0 1 1 1 1 0 0 1
 [77] 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 0 1 1 0 1 1 0

| That's the answer I was looking for.

  |============================================                           |  62%

| Now use sum() to count the number of 1s (heads) in flips2. It should be close
| to 70!

> sum(flips2)
[1] 73

| You are amazing!

  |===============================================                        |  66%

| Similar to rbinom(), we can use R to simulate random numbers from many other
| probability distributions. Pull up the documentation for rnorm() now.

> ?rnorm

| Nice work!

  |=================================================                      |  69%

| The standard normal distribution has mean 0 and standard deviation 1. As you
| can see under the 'Usage' section in the documentation, the default values for
| the 'mean' and 'sd' arguments to rnorm() are 0 and 1, respectively. Thus,
| rnorm(10) will generate 10 random numbers from a standard normal distribution.
| Give it a try.

> rnorm(10)
 [1]  0.3987396  0.3282713  2.1388041 -0.1709361 -0.2327032 -0.6539553 -0.2114258
 [8] -0.8427425  0.8412102 -0.3561779

| Keep working like that and you'll get there!

  |===================================================                    |  72%

| Now do the same, except with a mean of 100 and a standard deviation of 25.

> 
> rnorm(10, mean = 100, sd = 25)
 [1] 102.00861 167.56057  72.95437 114.35121 144.51068 101.60148 114.07483
 [8]  92.17431 112.48456 127.33378

| Excellent work!

  |=====================================================                  |  75%

| Finally, what if we want to simulate 100 *groups* of random numbers, each
| containing 5 values generated from a Poisson distribution with mean 10? Let's
| start with one group of 5 numbers, then I'll show you how to repeat the
| operation 100 times in a convenient and compact way.

...

  |=======================================================                |  78%

| Generate 5 random values from a Poisson distribution with mean 10. Check out
| the documentation for rpois() if you need help.

> rpois(5, 10)
[1] 13 11  8 14 19

| All that practice is paying off!

  |==========================================================             |  81%

| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times.
| Store the result in a new variable called my_pois.

> replicate(100, rpois(5, 10))
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]
[1,]    8   13   11   10    7   15    7    7   15    17    15    13     8     9
[2,]   14   15    7   12   12   12    7   12   10    11     7    11    10    11
[3,]    9    7    8   10   12    9   13    9   16    11    17     5    13    11
[4,]   11   16    9    6   12    8   10   10    6    13    10    13     8    10
[5,]   12   10   14    4   12   16   11    9   13    10     8     7    11     7
     [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26]
[1,]     9     8    10     7    12     8    16    10     3    10    11     7
[2,]     7     7    14    16    15    12    18     8     5    11     8    12
[3,]    11     7    18     7     7    11     9    14    12    11     9     8
[4,]     8    14     9    14     9    10     4    10    10     8     8    14
[5,]     9     8     4     7    14    10    13     6    11     6    10     7
     [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38]
[1,]    12     7    11    11    12    12     7     7    12    11    12     8
[2,]     9    16    10     8    12     9    11     7    11    10    13    11
[3,]    15    11     9    12    11     9     7     8    13    10    11     9
[4,]     7    10     6     7    16     7     7    11    10     4     6    14
[5,]    17     4     7    10     8     6    13     8     7     9    17     7
     [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50]
[1,]    11    10    11    10    11    12     9    14    10    10    11    17
[2,]    17     7    14     7     7    13     7    10     6    10    11     7
[3,]     8    10    13     8     8    10     9    11    10    11     8     9
[4,]     7     7     9    11    10    15     8    12    11    11    14     6
[5,]    13    13    10     8    12    10     7     5     8    10     9    12
     [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]
[1,]     8     6     8    13     8     3     5    12     6     6    11     6
[2,]    14     9     6    13    14    15    12    13     7    10    16     9
[3,]    10    18    16    13    10    17    11    12     7     7     6     7
[4,]     9     6    11     9    12    10     8    10    11     3     9    12
[5,]    11    13    13     8     9    10     8     9    10     7    14    13
     [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74]
[1,]    12    16    13     3     9     9    10     8     7     8    10     9
[2,]     4     5    13     8    12    17     7     8     8    10    10    10
[3,]     9    10    13     8    10     9     9    12    16     9    10     9
[4,]     4    16    12    13     9    13     8     5    11     9    11    11
[5,]     8    10     9    10    13     8     7     6     8    10     5     6
     [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86]
[1,]     6    12    10    12    16    12     9    11     6     6     9    12
[2,]    14     7     1     8     9    11     7     8    10    12     7     9
[3,]     7     5     9     7    13    12    11    10     9    11    11     4
[4,]    12     6     7     4    17     7     4    10     8     6    12    12
[5,]    13    13    11    13     6     9    12    11    16    11     8    10
     [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98]
[1,]     8    13     9    10     5     7    11     7     6     9    10    10
[2,]     9    10     3    13     8    10    11    12    12     4    15    15
[3,]    14     8    12     8     7    10    10     9     9    11    17    10
[4,]     7    10     8    11    13     9    17     8    11     7    10    11
[5,]     9    15     4     9    11    17    13     9     5    13    10     7
     [,99] [,100]
[1,]    13      5
[2,]    14     12
[3,]     7      9
[4,]    11     13
[5,]    15      8

| You almost had it, but not quite. Try again. Or, type info() for more options.

| my_pois <- replicate(100, rpois(5, 10)) will repeat the operation 100 times
| and store the result.

> my_pois <- replicate(100, rpois(5, 10))

| You are quite good my friend!

  |============================================================           |  84%

| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14]
[1,]   15    9   13    9    9    8   10   21    9     9    12    11    13     5
[2,]   11   12    8   17   11   11    8   13    7     7     6    11    17    11
[3,]   11   10   10   11    9   10   13    9   13    12    10    11     7    17
[4,]    7   15    6    9   11    6   11   18    6    13     5     7     6    16
[5,]   11   10    7   14    9   14    9   11   16    14    10     9    13    13
     [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26]
[1,]     9     5     8    13     8    10    15     3     7    15     3    13
[2,]    14    10    11    12    12     6    12    12     9    11    11     6
[3,]     9     8     9    11    12    10     8    15     7     7    13     6
[4,]    11    19    10    14     9     8    19     9     9     9    11     8
[5,]    12     9    13     8    11    13     7     9     3     9    10    13
     [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38]
[1,]     6     9    14     8     6    12     8    11    12    17     8    12
[2,]    13    17     8    11     9    13     5    11     8    13    17    13
[3,]     6     8    10    13    13    10    11     4    10    10     2     6
[4,]     9     9    11    13    13    11    13     7    11     7    15    10
[5,]    16     8    13    13    14     3    15     7    11     7    12     8
     [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50]
[1,]    11     5    11     7    10    12     7    12     5    10    12    10
[2,]     7     5    15     8    11     7     6    13     8    10    10    10
[3,]    11     7     7    13     8    12    13     7     8     9    11     7
[4,]    10    14    11     8    10     9     7    14     8    10    18    13
[5,]    11    12     5    10    14     4     9     5     3    12     8    12
     [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62]
[1,]    13     3     9    10    10     8     6    10     6     6    12    11
[2,]    13     9    14    14    13    15     9     8    11    14    14    10
[3,]     6     9     8     9     9    13    13    11    10    14    11     8
[4,]     7     8     8     6     7     4    12     8    16     8     7    12
[5,]    10     4     8    12    12    11     9    14    10     7    11    16
     [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74]
[1,]    12     9    11     6    15     9     5     6     7    14    14     5
[2,]     5     9     7    14     7    18    11    10    13    12     8    11
[3,]    13    13    10    11     6     8    17     8     7     5     6    11
[4,]    15    10    11    14    11    11     8     7    10    15    12    12
[5,]    11    20    10    12     7     9    12     6    11     7    11     9
     [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86]
[1,]     9    12    11    14     9     9    11    15    12     5     9     3
[2,]    15     9     8    14    10     7     9     9     7    10     5     8
[3,]     5    12     6     7    10     9     7     6     6     6     9     6
[4,]     9     3    12     9    11    10    15    11    15     6    11    12
[5,]    10     9     8     6     6     9     7    11    13     8    14    16
     [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98]
[1,]    11    12    11     9     9     9    14     5     6    15     6    11
[2,]     9     6     9    10     4    11    18     7    13    14    14    13
[3,]     6    10     8    12    12     9     9    10    15    12    11     8
[4,]     9    11    11    14     6     6     6     7    10    10    10     9
[5,]     7     6     7    10    11     6    16    20    10    16    11     6
     [,99] [,100]
[1,]     8      5
[2,]    12      7
[3,]    14     17
[4,]     7     10
[5,]    15      8

| You are doing so well!

  |==============================================================         |  88%

| replicate() created a matrix, each column of which contains 5 random numbers
| generated from a Poisson distribution with mean 10. Now we can find the mean
| of each column in my_pois using the colMeans() function. Store the result in a
| variable called cm.

> cm <- colMeans(my_pois)

| You are amazing!

  |================================================================       |  91%

| And let's take a look at the distribution of our column means by plotting a
| histogram with hist(cm).

> hist(cm)

| You are amazing!

  |===================================================================    |  94%

| Looks like our column means are almost normally distributed, right? That's the
| Central Limit Theorem at work, but that's a lesson for another day!

...

  |=====================================================================  |  97%

| All of the standard probability distributions are built into R, including
| exponential (rexp()), chi-squared (rchisq()), gamma (rgamma()), .... Well, you
| see the pattern.

...

  |=======================================================================| 100%

| Simulation is practically a field of its own and we've only skimmed the
| surface of what's possible. I encourage you to explore these and other
| functions further on your own.

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011, Simulation.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: lapply and sapply         10: vapply and tapply       
11: Looking at Data           12: Simulation              
13: Dates and Times           14: Base Graphics           


Selection: 13

  |                                                                       |   0%

| R has a special way of representing dates and times, which can be helpful if
| you're working with data that show how something changes over time (i.e.
| time-series data) or if your data contain some other temporal information,
| like dates of birth.

...

  |==                                                                     |   3%

| Dates are represented by the 'Date' class and times are represented by the
| 'POSIXct' and 'POSIXlt' classes. Internally, dates are stored as the number of
| days since 1970-01-01 and times are stored as either the number of seconds
| since 1970-01-01 (for 'POSIXct') or a list of seconds, minutes, hours, etc.
| (for 'POSIXlt').

...

  |====                                                                   |   6%

| Let's start by using d1 <- Sys.Date() to get the current date and store it in
| the variable d1. (That's the letter 'd' and the number 1.)

> d1 <- Sys.Date()

| You nailed it! Good job!

  |======                                                                 |   9%

| Use the class() function to confirm d1 is a Date object.

> class(d1)
[1] "Date"

| You got it!

  |========                                                               |  11%

| We can use the unclass() function to see what d1 looks like internally. Try it
| out.

> unclass(d1)
[1] 16481

| You are doing so well!

  |==========                                                             |  14%

| That's the exact number of days since 1970-01-01!

...

  |============                                                           |  17%

| However, if you print d1 to the console, you'll get today's date --
| YEAR-MONTH-DAY. Give it a try.

> d1
[1] "2015-02-15"

| You got it right!

  |==============                                                         |  20%

| What if we need to reference a date prior to 1970-01-01? Create a variable d2
| containing as.Date("1969-01-01").

> d2 <- as.Date("1969-01-01")

| That's a job well done!

  |================                                                       |  23%

| Now use unclass() again to see what d2 looks like internally.

> unclass(d2)
[1] -365

| That's a job well done!

  |==================                                                     |  26%

| As you may have anticipated, you get a negative number. In this case, it's
| -365, since 1969-01-01 is exactly one calendar year (i.e. 365 days) BEFORE
| 1970-01-01.

...

  |====================                                                   |  29%

| Now, let's take a look at how R stores times. You can access the current date
| and time using the Sys.time() function with no arguments. Do this and store
| the result in a variable called t1.

> 
> t1 <- Sys.time()

| You are amazing!

  |======================                                                 |  31%

| View the contents of t1.

> t1
[1] "2015-02-15 10:38:01 BDT"

| You are amazing!

  |========================                                               |  34%

| And check the class() of t1.

> class(t1)
[1] "POSIXct" "POSIXt" 

| That's the answer I was looking for.

  |==========================                                             |  37%

| As mentioned earlier, POSIXct is just one of two ways that R represents time
| information. (You can ignore the second value above, POSIXt, which just
| functions as a common language between POSIXct and POSIXlt.) Use unclass() to
| see what t1 looks like internally -- the (large) number of seconds since the
| beginning of 1970.

> unclass(t1)
[1] 1423975081

| You nailed it! Good job!

  |============================                                           |  40%

| By default, Sys.time() returns an object of class POSIXct, but we can coerce
| the result to POSIXlt with as.POSIXlt(Sys.time()). Give it a try and store the
| result in t2.

> t2 <- as.POSIXlt(Sys.time())

| Keep working like that and you'll get there!

  |==============================                                         |  43%

| Check the class of t2.

> class(t2)
[1] "POSIXlt" "POSIXt" 

| Great job!

  |================================                                       |  46%

| Now view its contents.

> t2
[1] "2015-02-15 10:40:28 BDT"

| Excellent job!

  |==================================                                     |  49%

| The printed format of t2 is identical to that of t1. Now unclass() t2 to see
| how it is different internally.

> unclass(t2)
$sec
[1] 28.63595

$min
[1] 40

$hour
[1] 10

$mday
[1] 15

$mon
[1] 1

$year
[1] 115

$wday
[1] 0

$yday
[1] 45

$isdst
[1] 0

$zone
[1] "BDT"

$gmtoff
[1] 21600

attr(,"tzone")
[1] ""     "BDT"  "BDST"

| Excellent work!

  |=====================================                                  |  51%

| t2, like all POSIXlt objects, is just a list of values that make up the date
| and time. Use str(unclass(t2)) to have a more compact view.

> str(unclass(t2))
List of 11
 $ sec   : num 28.6
 $ min   : int 40
 $ hour  : int 10
 $ mday  : int 15
 $ mon   : int 1
 $ year  : int 115
 $ wday  : int 0
 $ yday  : int 45
 $ isdst : int 0
 $ zone  : chr "BDT"
 $ gmtoff: int 21600
 - attr(*, "tzone")= chr [1:3] "" "BDT" "BDST"

| All that practice is paying off!

  |=======================================                                |  54%

| If, for example, we want just the minutes from the time stored in t2, we can
| access them with t2$min. Give it a try.

> t2$min
[1] 40

| You are doing so well!

  |=========================================                              |  57%

| Now that we have explored all three types of date and time objects, let's look
| at a few functions that extract useful information from any of these objects
| -- weekdays(), months(), and quarters().

...

  |===========================================                            |  60%

| The weekdays() function will return the day of week from any date or time
| object. Try it out on d1, which is the Date object that contains today's date.

> weekdays(d1)
[1] "Sunday"

| That's the answer I was looking for.

  |=============================================                          |  63%

| The months() function also works on any date or time object. Try it on t1,
| which is the POSIXct object that contains the current time (well, it was the
| current time when you created it).

> months(t1)
[1] "February"

| Great job!

  |===============================================                        |  66%

| The quarters() function returns the quarter of the year (Q1-Q4) from any date
| or time object. Try it on t2, which is the POSIXlt object that contains the
| time at which you created it.

> quarters(t2)
[1] "Q1"

| You nailed it! Good job!

  |=================================================                      |  69%

| Often, the dates and times in a dataset will be in a format that R does not
| recognize. The strptime() function can be helpful in this situation.

...

  |===================================================                    |  71%

| strptime() converts character vectors to POSIXlt. In that sense, it is similar
| to as.POSIXlt(), except that the input doesn't have to be in a particular
| format (YYYY-MM-DD).

...

  |=====================================================                  |  74%

| To see how it works, store the following character string in a variable called
| t3: "October 17, 1986 08:24" (with the quotes).

> t3 <- "October 17, 1986 08:24"

| That's correct!

  |=======================================================                |  77%

| Now, use strptime(t3, "%B %d, %Y %H:%M") to help R convert our date/time
| object to a format that it understands. Assign the result to a new variable
| called t4. (You should pull up the documentation for strptime() if you'd like
| to know more about how it works.)

> t4 <- strptime(t3, "%B %d, %Y %H:%M")

| You got it right!

  |=========================================================              |  80%

| Print the contents of t4.

> t4
[1] "1986-10-17 08:24:00 BDT"

| You are doing so well!

  |===========================================================            |  83%

| That's the format we've come to expect. Now, let's check its class().

> class(t4)
[1] "POSIXlt" "POSIXt" 

| You got it!

  |=============================================================          |  86%

| Finally, there are a number of operations that you can perform on dates and
| times, including arithmetic operations (+ and -) and comparisons (<, ==, etc.)

...

  |===============================================================        |  89%

| The variable t1 contains the time at which you created it (recall you used
| Sys.time()). Confirm that some time has passed since you created t1 by using
| the 'greater than' operator to compare it to the current time: Sys.time() > t1

> Sys.time() > t1
[1] TRUE

| Keep up the great work!

  |=================================================================      |  91%

| So we know that some time has passed, but how much? Try subtracting t1 from
| the current time using Sys.time() - t1. Don't forget the parentheses at the
| end of Sys.time(), since it is a function.

> Sys.time() - t1
Time difference of 26.60912 mins

| That's a job well done!

  |===================================================================    |  94%

| The same line of thinking applies to addition and the other comparison
| operators. If you want more control over the units when finding the above
| difference in times, you can use difftime(), which allows you to specify a
| 'units' parameter.

...

  |=====================================================================  |  97%

| Use difftime(Sys.time(), t1, units = 'days') to find the amount of time in
| DAYS that has passed since you created t1.

> difftime(Sys.time(), t1, units = 'days')
Time difference of 0.01876156 days

| That's the answer I was looking for.

  |=======================================================================| 100%

| In this lesson, you learned how to work with dates and times in R. While it is
| important to understand the basics, if you find yourself working with dates
| and times often, you may want to check out the lubridate package by Hadley
| Wickham.

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If so,
| I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-011
Submission login (email): ahad.oli@gmail.com
Submission password: bcT6HdEYnK

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-011, Dates_and_Times.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.
